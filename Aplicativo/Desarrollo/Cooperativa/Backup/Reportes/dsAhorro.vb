'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsAhorro
    Inherits DataSet
    
    Private tabletbl_profiledocument As tbl_profiledocumentDataTable
    
    Private tabletbl_ahorro As tbl_ahorroDataTable
    
    Private tabletbl_ahorroretiro As tbl_ahorroretiroDataTable
    
    Private tableahorroAportacion As ahorroAportacionDataTable
    
    Private tablecertificados As certificadosDataTable
    
    Private tablesolicitudcredito As solicitudcreditoDataTable
    
    Private tablesolicitudcreditocliente As solicitudcreditoclienteDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tbl_profiledocument")) Is Nothing) Then
                Me.Tables.Add(New tbl_profiledocumentDataTable(ds.Tables("tbl_profiledocument")))
            End If
            If (Not (ds.Tables("tbl_ahorro")) Is Nothing) Then
                Me.Tables.Add(New tbl_ahorroDataTable(ds.Tables("tbl_ahorro")))
            End If
            If (Not (ds.Tables("tbl_ahorroretiro")) Is Nothing) Then
                Me.Tables.Add(New tbl_ahorroretiroDataTable(ds.Tables("tbl_ahorroretiro")))
            End If
            If (Not (ds.Tables("ahorroAportacion")) Is Nothing) Then
                Me.Tables.Add(New ahorroAportacionDataTable(ds.Tables("ahorroAportacion")))
            End If
            If (Not (ds.Tables("certificados")) Is Nothing) Then
                Me.Tables.Add(New certificadosDataTable(ds.Tables("certificados")))
            End If
            If (Not (ds.Tables("solicitudcredito")) Is Nothing) Then
                Me.Tables.Add(New solicitudcreditoDataTable(ds.Tables("solicitudcredito")))
            End If
            If (Not (ds.Tables("solicitudcreditocliente")) Is Nothing) Then
                Me.Tables.Add(New solicitudcreditoclienteDataTable(ds.Tables("solicitudcreditocliente")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_profiledocument As tbl_profiledocumentDataTable
        Get
            Return Me.tabletbl_profiledocument
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_ahorro As tbl_ahorroDataTable
        Get
            Return Me.tabletbl_ahorro
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbl_ahorroretiro As tbl_ahorroretiroDataTable
        Get
            Return Me.tabletbl_ahorroretiro
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ahorroAportacion As ahorroAportacionDataTable
        Get
            Return Me.tableahorroAportacion
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property certificados As certificadosDataTable
        Get
            Return Me.tablecertificados
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property solicitudcredito As solicitudcreditoDataTable
        Get
            Return Me.tablesolicitudcredito
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property solicitudcreditocliente As solicitudcreditoclienteDataTable
        Get
            Return Me.tablesolicitudcreditocliente
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsAhorro = CType(MyBase.Clone,dsAhorro)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tbl_profiledocument")) Is Nothing) Then
            Me.Tables.Add(New tbl_profiledocumentDataTable(ds.Tables("tbl_profiledocument")))
        End If
        If (Not (ds.Tables("tbl_ahorro")) Is Nothing) Then
            Me.Tables.Add(New tbl_ahorroDataTable(ds.Tables("tbl_ahorro")))
        End If
        If (Not (ds.Tables("tbl_ahorroretiro")) Is Nothing) Then
            Me.Tables.Add(New tbl_ahorroretiroDataTable(ds.Tables("tbl_ahorroretiro")))
        End If
        If (Not (ds.Tables("ahorroAportacion")) Is Nothing) Then
            Me.Tables.Add(New ahorroAportacionDataTable(ds.Tables("ahorroAportacion")))
        End If
        If (Not (ds.Tables("certificados")) Is Nothing) Then
            Me.Tables.Add(New certificadosDataTable(ds.Tables("certificados")))
        End If
        If (Not (ds.Tables("solicitudcredito")) Is Nothing) Then
            Me.Tables.Add(New solicitudcreditoDataTable(ds.Tables("solicitudcredito")))
        End If
        If (Not (ds.Tables("solicitudcreditocliente")) Is Nothing) Then
            Me.Tables.Add(New solicitudcreditoclienteDataTable(ds.Tables("solicitudcreditocliente")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletbl_profiledocument = CType(Me.Tables("tbl_profiledocument"),tbl_profiledocumentDataTable)
        If (Not (Me.tabletbl_profiledocument) Is Nothing) Then
            Me.tabletbl_profiledocument.InitVars
        End If
        Me.tabletbl_ahorro = CType(Me.Tables("tbl_ahorro"),tbl_ahorroDataTable)
        If (Not (Me.tabletbl_ahorro) Is Nothing) Then
            Me.tabletbl_ahorro.InitVars
        End If
        Me.tabletbl_ahorroretiro = CType(Me.Tables("tbl_ahorroretiro"),tbl_ahorroretiroDataTable)
        If (Not (Me.tabletbl_ahorroretiro) Is Nothing) Then
            Me.tabletbl_ahorroretiro.InitVars
        End If
        Me.tableahorroAportacion = CType(Me.Tables("ahorroAportacion"),ahorroAportacionDataTable)
        If (Not (Me.tableahorroAportacion) Is Nothing) Then
            Me.tableahorroAportacion.InitVars
        End If
        Me.tablecertificados = CType(Me.Tables("certificados"),certificadosDataTable)
        If (Not (Me.tablecertificados) Is Nothing) Then
            Me.tablecertificados.InitVars
        End If
        Me.tablesolicitudcredito = CType(Me.Tables("solicitudcredito"),solicitudcreditoDataTable)
        If (Not (Me.tablesolicitudcredito) Is Nothing) Then
            Me.tablesolicitudcredito.InitVars
        End If
        Me.tablesolicitudcreditocliente = CType(Me.Tables("solicitudcreditocliente"),solicitudcreditoclienteDataTable)
        If (Not (Me.tablesolicitudcreditocliente) Is Nothing) Then
            Me.tablesolicitudcreditocliente.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsAhorro"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsAhorro.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletbl_profiledocument = New tbl_profiledocumentDataTable
        Me.Tables.Add(Me.tabletbl_profiledocument)
        Me.tabletbl_ahorro = New tbl_ahorroDataTable
        Me.Tables.Add(Me.tabletbl_ahorro)
        Me.tabletbl_ahorroretiro = New tbl_ahorroretiroDataTable
        Me.Tables.Add(Me.tabletbl_ahorroretiro)
        Me.tableahorroAportacion = New ahorroAportacionDataTable
        Me.Tables.Add(Me.tableahorroAportacion)
        Me.tablecertificados = New certificadosDataTable
        Me.Tables.Add(Me.tablecertificados)
        Me.tablesolicitudcredito = New solicitudcreditoDataTable
        Me.Tables.Add(Me.tablesolicitudcredito)
        Me.tablesolicitudcreditocliente = New solicitudcreditoclienteDataTable
        Me.Tables.Add(Me.tablesolicitudcreditocliente)
    End Sub
    
    Private Function ShouldSerializetbl_profiledocument() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetbl_ahorro() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetbl_ahorroretiro() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeahorroAportacion() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecertificados() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesolicitudcredito() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializesolicitudcreditocliente() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tbl_profiledocumentRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_profiledocumentRowChangeEvent)
    
    Public Delegate Sub tbl_ahorroRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_ahorroRowChangeEvent)
    
    Public Delegate Sub tbl_ahorroretiroRowChangeEventHandler(ByVal sender As Object, ByVal e As tbl_ahorroretiroRowChangeEvent)
    
    Public Delegate Sub ahorroAportacionRowChangeEventHandler(ByVal sender As Object, ByVal e As ahorroAportacionRowChangeEvent)
    
    Public Delegate Sub certificadosRowChangeEventHandler(ByVal sender As Object, ByVal e As certificadosRowChangeEvent)
    
    Public Delegate Sub solicitudcreditoRowChangeEventHandler(ByVal sender As Object, ByVal e As solicitudcreditoRowChangeEvent)
    
    Public Delegate Sub solicitudcreditoclienteRowChangeEventHandler(ByVal sender As Object, ByVal e As solicitudcreditoclienteRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_profiledocumentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfldCompanyID As DataColumn
        
        Private columnfldCompany As DataColumn
        
        Private columnfldAddress As DataColumn
        
        Private columnfldPhone As DataColumn
        
        Private columnfldRnc As DataColumn
        
        Private columnfldPassDescuento As DataColumn
        
        Private columnfldPassConfig As DataColumn
        
        Private columnfldPassAdmin As DataColumn
        
        Private columnfldNotaRecepcion As DataColumn
        
        Private columnfldDiasVenceFC As DataColumn
        
        Private columnfldColorForm As DataColumn
        
        Private columnfoto As DataColumn
        
        Friend Sub New()
            MyBase.New("tbl_profiledocument")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fldCompanyIDColumn As DataColumn
            Get
                Return Me.columnfldCompanyID
            End Get
        End Property
        
        Friend ReadOnly Property fldCompanyColumn As DataColumn
            Get
                Return Me.columnfldCompany
            End Get
        End Property
        
        Friend ReadOnly Property fldAddressColumn As DataColumn
            Get
                Return Me.columnfldAddress
            End Get
        End Property
        
        Friend ReadOnly Property fldPhoneColumn As DataColumn
            Get
                Return Me.columnfldPhone
            End Get
        End Property
        
        Friend ReadOnly Property fldRncColumn As DataColumn
            Get
                Return Me.columnfldRnc
            End Get
        End Property
        
        Friend ReadOnly Property fldPassDescuentoColumn As DataColumn
            Get
                Return Me.columnfldPassDescuento
            End Get
        End Property
        
        Friend ReadOnly Property fldPassConfigColumn As DataColumn
            Get
                Return Me.columnfldPassConfig
            End Get
        End Property
        
        Friend ReadOnly Property fldPassAdminColumn As DataColumn
            Get
                Return Me.columnfldPassAdmin
            End Get
        End Property
        
        Friend ReadOnly Property fldNotaRecepcionColumn As DataColumn
            Get
                Return Me.columnfldNotaRecepcion
            End Get
        End Property
        
        Friend ReadOnly Property fldDiasVenceFCColumn As DataColumn
            Get
                Return Me.columnfldDiasVenceFC
            End Get
        End Property
        
        Friend ReadOnly Property fldColorFormColumn As DataColumn
            Get
                Return Me.columnfldColorForm
            End Get
        End Property
        
        Friend ReadOnly Property fotoColumn As DataColumn
            Get
                Return Me.columnfoto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_profiledocumentRow
            Get
                Return CType(Me.Rows(index),tbl_profiledocumentRow)
            End Get
        End Property
        
        Public Event tbl_profiledocumentRowChanged As tbl_profiledocumentRowChangeEventHandler
        
        Public Event tbl_profiledocumentRowChanging As tbl_profiledocumentRowChangeEventHandler
        
        Public Event tbl_profiledocumentRowDeleted As tbl_profiledocumentRowChangeEventHandler
        
        Public Event tbl_profiledocumentRowDeleting As tbl_profiledocumentRowChangeEventHandler
        
        Public Overloads Sub Addtbl_profiledocumentRow(ByVal row As tbl_profiledocumentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtbl_profiledocumentRow(ByVal fldCompany As String, ByVal fldAddress As String, ByVal fldPhone As String, ByVal fldRnc As String, ByVal fldPassDescuento As String, ByVal fldPassConfig As String, ByVal fldPassAdmin As String, ByVal fldNotaRecepcion As String, ByVal fldDiasVenceFC As String, ByVal fldColorForm As String, ByVal foto() As Byte) As tbl_profiledocumentRow
            Dim rowtbl_profiledocumentRow As tbl_profiledocumentRow = CType(Me.NewRow,tbl_profiledocumentRow)
            rowtbl_profiledocumentRow.ItemArray = New Object() {Nothing, fldCompany, fldAddress, fldPhone, fldRnc, fldPassDescuento, fldPassConfig, fldPassAdmin, fldNotaRecepcion, fldDiasVenceFC, fldColorForm, foto}
            Me.Rows.Add(rowtbl_profiledocumentRow)
            Return rowtbl_profiledocumentRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tbl_profiledocumentDataTable = CType(MyBase.Clone,tbl_profiledocumentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tbl_profiledocumentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfldCompanyID = Me.Columns("fldCompanyID")
            Me.columnfldCompany = Me.Columns("fldCompany")
            Me.columnfldAddress = Me.Columns("fldAddress")
            Me.columnfldPhone = Me.Columns("fldPhone")
            Me.columnfldRnc = Me.Columns("fldRnc")
            Me.columnfldPassDescuento = Me.Columns("fldPassDescuento")
            Me.columnfldPassConfig = Me.Columns("fldPassConfig")
            Me.columnfldPassAdmin = Me.Columns("fldPassAdmin")
            Me.columnfldNotaRecepcion = Me.Columns("fldNotaRecepcion")
            Me.columnfldDiasVenceFC = Me.Columns("fldDiasVenceFC")
            Me.columnfldColorForm = Me.Columns("fldColorForm")
            Me.columnfoto = Me.Columns("foto")
        End Sub
        
        Private Sub InitClass()
            Me.columnfldCompanyID = New DataColumn("fldCompanyID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldCompanyID)
            Me.columnfldCompany = New DataColumn("fldCompany", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldCompany)
            Me.columnfldAddress = New DataColumn("fldAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldAddress)
            Me.columnfldPhone = New DataColumn("fldPhone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldPhone)
            Me.columnfldRnc = New DataColumn("fldRnc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldRnc)
            Me.columnfldPassDescuento = New DataColumn("fldPassDescuento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldPassDescuento)
            Me.columnfldPassConfig = New DataColumn("fldPassConfig", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldPassConfig)
            Me.columnfldPassAdmin = New DataColumn("fldPassAdmin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldPassAdmin)
            Me.columnfldNotaRecepcion = New DataColumn("fldNotaRecepcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldNotaRecepcion)
            Me.columnfldDiasVenceFC = New DataColumn("fldDiasVenceFC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldDiasVenceFC)
            Me.columnfldColorForm = New DataColumn("fldColorForm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfldColorForm)
            Me.columnfoto = New DataColumn("foto", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfoto)
            Me.columnfldCompanyID.AutoIncrement = true
            Me.columnfldCompanyID.AllowDBNull = false
        End Sub
        
        Public Function Newtbl_profiledocumentRow() As tbl_profiledocumentRow
            Return CType(Me.NewRow,tbl_profiledocumentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tbl_profiledocumentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tbl_profiledocumentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_profiledocumentRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_profiledocumentRowChanged(Me, New tbl_profiledocumentRowChangeEvent(CType(e.Row,tbl_profiledocumentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_profiledocumentRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_profiledocumentRowChanging(Me, New tbl_profiledocumentRowChangeEvent(CType(e.Row,tbl_profiledocumentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_profiledocumentRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_profiledocumentRowDeleted(Me, New tbl_profiledocumentRowChangeEvent(CType(e.Row,tbl_profiledocumentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_profiledocumentRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_profiledocumentRowDeleting(Me, New tbl_profiledocumentRowChangeEvent(CType(e.Row,tbl_profiledocumentRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetbl_profiledocumentRow(ByVal row As tbl_profiledocumentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_profiledocumentRow
        Inherits DataRow
        
        Private tabletbl_profiledocument As tbl_profiledocumentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_profiledocument = CType(Me.Table,tbl_profiledocumentDataTable)
        End Sub
        
        Public Property fldCompanyID As Integer
            Get
                Return CType(Me(Me.tabletbl_profiledocument.fldCompanyIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldCompanyIDColumn) = value
            End Set
        End Property
        
        Public Property fldCompany As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldCompanyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldCompanyColumn) = value
            End Set
        End Property
        
        Public Property fldAddress As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldAddressColumn) = value
            End Set
        End Property
        
        Public Property fldPhone As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldPhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldPhoneColumn) = value
            End Set
        End Property
        
        Public Property fldRnc As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldRncColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldRncColumn) = value
            End Set
        End Property
        
        Public Property fldPassDescuento As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldPassDescuentoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldPassDescuentoColumn) = value
            End Set
        End Property
        
        Public Property fldPassConfig As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldPassConfigColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldPassConfigColumn) = value
            End Set
        End Property
        
        Public Property fldPassAdmin As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldPassAdminColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldPassAdminColumn) = value
            End Set
        End Property
        
        Public Property fldNotaRecepcion As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldNotaRecepcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldNotaRecepcionColumn) = value
            End Set
        End Property
        
        Public Property fldDiasVenceFC As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldDiasVenceFCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldDiasVenceFCColumn) = value
            End Set
        End Property
        
        Public Property fldColorForm As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fldColorFormColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fldColorFormColumn) = value
            End Set
        End Property
        
        Public Property foto As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletbl_profiledocument.fotoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_profiledocument.fotoColumn) = value
            End Set
        End Property
        
        Public Function IsfldCompanyNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldCompanyColumn)
        End Function
        
        Public Sub SetfldCompanyNull()
            Me(Me.tabletbl_profiledocument.fldCompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldAddressNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldAddressColumn)
        End Function
        
        Public Sub SetfldAddressNull()
            Me(Me.tabletbl_profiledocument.fldAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldPhoneNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldPhoneColumn)
        End Function
        
        Public Sub SetfldPhoneNull()
            Me(Me.tabletbl_profiledocument.fldPhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldRncNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldRncColumn)
        End Function
        
        Public Sub SetfldRncNull()
            Me(Me.tabletbl_profiledocument.fldRncColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldPassDescuentoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldPassDescuentoColumn)
        End Function
        
        Public Sub SetfldPassDescuentoNull()
            Me(Me.tabletbl_profiledocument.fldPassDescuentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldPassConfigNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldPassConfigColumn)
        End Function
        
        Public Sub SetfldPassConfigNull()
            Me(Me.tabletbl_profiledocument.fldPassConfigColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldPassAdminNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldPassAdminColumn)
        End Function
        
        Public Sub SetfldPassAdminNull()
            Me(Me.tabletbl_profiledocument.fldPassAdminColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldNotaRecepcionNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldNotaRecepcionColumn)
        End Function
        
        Public Sub SetfldNotaRecepcionNull()
            Me(Me.tabletbl_profiledocument.fldNotaRecepcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldDiasVenceFCNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldDiasVenceFCColumn)
        End Function
        
        Public Sub SetfldDiasVenceFCNull()
            Me(Me.tabletbl_profiledocument.fldDiasVenceFCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfldColorFormNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fldColorFormColumn)
        End Function
        
        Public Sub SetfldColorFormNull()
            Me(Me.tabletbl_profiledocument.fldColorFormColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfotoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_profiledocument.fotoColumn)
        End Function
        
        Public Sub SetfotoNull()
            Me(Me.tabletbl_profiledocument.fotoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_profiledocumentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tbl_profiledocumentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tbl_profiledocumentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tbl_profiledocumentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_ahorroDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfld_id As DataColumn
        
        Private columnfld_FullName As DataColumn
        
        Private columnCuentaNo As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnNotas As DataColumn
        
        Private columnUsuario As DataColumn
        
        Private columnID As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnfld_Identity As DataColumn
        
        Private columnCaja As DataColumn
        
        Private columnDosmil As DataColumn
        
        Private columnMil As DataColumn
        
        Private columnQuiniento As DataColumn
        
        Private columnDosCiento As DataColumn
        
        Private columnCien As DataColumn
        
        Private columnCincuenta As DataColumn
        
        Private columnVeinticinco As DataColumn
        
        Private columnDiez As DataColumn
        
        Private columnCinco As DataColumn
        
        Private columnUno As DataColumn
        
        Friend Sub New()
            MyBase.New("tbl_ahorro")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fld_idColumn As DataColumn
            Get
                Return Me.columnfld_id
            End Get
        End Property
        
        Friend ReadOnly Property fld_FullNameColumn As DataColumn
            Get
                Return Me.columnfld_FullName
            End Get
        End Property
        
        Friend ReadOnly Property CuentaNoColumn As DataColumn
            Get
                Return Me.columnCuentaNo
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property NotasColumn As DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property fld_IdentityColumn As DataColumn
            Get
                Return Me.columnfld_Identity
            End Get
        End Property
        
        Friend ReadOnly Property CajaColumn As DataColumn
            Get
                Return Me.columnCaja
            End Get
        End Property
        
        Friend ReadOnly Property DosmilColumn As DataColumn
            Get
                Return Me.columnDosmil
            End Get
        End Property
        
        Friend ReadOnly Property MilColumn As DataColumn
            Get
                Return Me.columnMil
            End Get
        End Property
        
        Friend ReadOnly Property QuinientoColumn As DataColumn
            Get
                Return Me.columnQuiniento
            End Get
        End Property
        
        Friend ReadOnly Property DosCientoColumn As DataColumn
            Get
                Return Me.columnDosCiento
            End Get
        End Property
        
        Friend ReadOnly Property CienColumn As DataColumn
            Get
                Return Me.columnCien
            End Get
        End Property
        
        Friend ReadOnly Property CincuentaColumn As DataColumn
            Get
                Return Me.columnCincuenta
            End Get
        End Property
        
        Friend ReadOnly Property VeinticincoColumn As DataColumn
            Get
                Return Me.columnVeinticinco
            End Get
        End Property
        
        Friend ReadOnly Property DiezColumn As DataColumn
            Get
                Return Me.columnDiez
            End Get
        End Property
        
        Friend ReadOnly Property CincoColumn As DataColumn
            Get
                Return Me.columnCinco
            End Get
        End Property
        
        Friend ReadOnly Property UnoColumn As DataColumn
            Get
                Return Me.columnUno
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_ahorroRow
            Get
                Return CType(Me.Rows(index),tbl_ahorroRow)
            End Get
        End Property
        
        Public Event tbl_ahorroRowChanged As tbl_ahorroRowChangeEventHandler
        
        Public Event tbl_ahorroRowChanging As tbl_ahorroRowChangeEventHandler
        
        Public Event tbl_ahorroRowDeleted As tbl_ahorroRowChangeEventHandler
        
        Public Event tbl_ahorroRowDeleting As tbl_ahorroRowChangeEventHandler
        
        Public Overloads Sub Addtbl_ahorroRow(ByVal row As tbl_ahorroRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtbl_ahorroRow( _
                    ByVal fld_id As Integer,  _
                    ByVal fld_FullName As String,  _
                    ByVal CuentaNo As String,  _
                    ByVal Monto As Double,  _
                    ByVal Notas As String,  _
                    ByVal Usuario As String,  _
                    ByVal ID As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal fld_Identity As String,  _
                    ByVal Caja As String,  _
                    ByVal Dosmil As Double,  _
                    ByVal Mil As Double,  _
                    ByVal Quiniento As Double,  _
                    ByVal DosCiento As Double,  _
                    ByVal Cien As Double,  _
                    ByVal Cincuenta As Double,  _
                    ByVal Veinticinco As Double,  _
                    ByVal Diez As Double,  _
                    ByVal Cinco As Double,  _
                    ByVal Uno As Double) As tbl_ahorroRow
            Dim rowtbl_ahorroRow As tbl_ahorroRow = CType(Me.NewRow,tbl_ahorroRow)
            rowtbl_ahorroRow.ItemArray = New Object() {fld_id, fld_FullName, CuentaNo, Monto, Notas, Usuario, ID, Fecha, fld_Identity, Caja, Dosmil, Mil, Quiniento, DosCiento, Cien, Cincuenta, Veinticinco, Diez, Cinco, Uno}
            Me.Rows.Add(rowtbl_ahorroRow)
            Return rowtbl_ahorroRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tbl_ahorroDataTable = CType(MyBase.Clone,tbl_ahorroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tbl_ahorroDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfld_id = Me.Columns("fld_id")
            Me.columnfld_FullName = Me.Columns("fld_FullName")
            Me.columnCuentaNo = Me.Columns("CuentaNo")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnNotas = Me.Columns("Notas")
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnID = Me.Columns("ID")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnfld_Identity = Me.Columns("fld_Identity")
            Me.columnCaja = Me.Columns("Caja")
            Me.columnDosmil = Me.Columns("Dosmil")
            Me.columnMil = Me.Columns("Mil")
            Me.columnQuiniento = Me.Columns("Quiniento")
            Me.columnDosCiento = Me.Columns("DosCiento")
            Me.columnCien = Me.Columns("Cien")
            Me.columnCincuenta = Me.Columns("Cincuenta")
            Me.columnVeinticinco = Me.Columns("Veinticinco")
            Me.columnDiez = Me.Columns("Diez")
            Me.columnCinco = Me.Columns("Cinco")
            Me.columnUno = Me.Columns("Uno")
        End Sub
        
        Private Sub InitClass()
            Me.columnfld_id = New DataColumn("fld_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_id)
            Me.columnfld_FullName = New DataColumn("fld_FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_FullName)
            Me.columnCuentaNo = New DataColumn("CuentaNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaNo)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnNotas = New DataColumn("Notas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotas)
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnfld_Identity = New DataColumn("fld_Identity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_Identity)
            Me.columnCaja = New DataColumn("Caja", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaja)
            Me.columnDosmil = New DataColumn("Dosmil", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDosmil)
            Me.columnMil = New DataColumn("Mil", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMil)
            Me.columnQuiniento = New DataColumn("Quiniento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuiniento)
            Me.columnDosCiento = New DataColumn("DosCiento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDosCiento)
            Me.columnCien = New DataColumn("Cien", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCien)
            Me.columnCincuenta = New DataColumn("Cincuenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCincuenta)
            Me.columnVeinticinco = New DataColumn("Veinticinco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVeinticinco)
            Me.columnDiez = New DataColumn("Diez", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiez)
            Me.columnCinco = New DataColumn("Cinco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCinco)
            Me.columnUno = New DataColumn("Uno", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUno)
        End Sub
        
        Public Function Newtbl_ahorroRow() As tbl_ahorroRow
            Return CType(Me.NewRow,tbl_ahorroRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tbl_ahorroRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tbl_ahorroRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_ahorroRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroRowChanged(Me, New tbl_ahorroRowChangeEvent(CType(e.Row,tbl_ahorroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_ahorroRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroRowChanging(Me, New tbl_ahorroRowChangeEvent(CType(e.Row,tbl_ahorroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_ahorroRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroRowDeleted(Me, New tbl_ahorroRowChangeEvent(CType(e.Row,tbl_ahorroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_ahorroRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroRowDeleting(Me, New tbl_ahorroRowChangeEvent(CType(e.Row,tbl_ahorroRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetbl_ahorroRow(ByVal row As tbl_ahorroRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_ahorroRow
        Inherits DataRow
        
        Private tabletbl_ahorro As tbl_ahorroDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_ahorro = CType(Me.Table,tbl_ahorroDataTable)
        End Sub
        
        Public Property fld_id As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.fld_idColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.fld_idColumn) = value
            End Set
        End Property
        
        Public Property fld_FullName As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.fld_FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.fld_FullNameColumn) = value
            End Set
        End Property
        
        Public Property CuentaNo As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.CuentaNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.CuentaNoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.MontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.MontoColumn) = value
            End Set
        End Property
        
        Public Property Notas As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.NotasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.NotasColumn) = value
            End Set
        End Property
        
        Public Property Usuario As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.UsuarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.IDColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.FechaColumn) = value
            End Set
        End Property
        
        Public Property fld_Identity As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.fld_IdentityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.fld_IdentityColumn) = value
            End Set
        End Property
        
        Public Property Caja As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.CajaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.CajaColumn) = value
            End Set
        End Property
        
        Public Property Dosmil As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.DosmilColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.DosmilColumn) = value
            End Set
        End Property
        
        Public Property Mil As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.MilColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.MilColumn) = value
            End Set
        End Property
        
        Public Property Quiniento As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.QuinientoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.QuinientoColumn) = value
            End Set
        End Property
        
        Public Property DosCiento As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.DosCientoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.DosCientoColumn) = value
            End Set
        End Property
        
        Public Property Cien As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.CienColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.CienColumn) = value
            End Set
        End Property
        
        Public Property Cincuenta As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.CincuentaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.CincuentaColumn) = value
            End Set
        End Property
        
        Public Property Veinticinco As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.VeinticincoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.VeinticincoColumn) = value
            End Set
        End Property
        
        Public Property Diez As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.DiezColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.DiezColumn) = value
            End Set
        End Property
        
        Public Property Cinco As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.CincoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.CincoColumn) = value
            End Set
        End Property
        
        Public Property Uno As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorro.UnoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorro.UnoColumn) = value
            End Set
        End Property
        
        Public Function Isfld_idNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.fld_idColumn)
        End Function
        
        Public Sub Setfld_idNull()
            Me(Me.tabletbl_ahorro.fld_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_FullNameNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.fld_FullNameColumn)
        End Function
        
        Public Sub Setfld_FullNameNull()
            Me(Me.tabletbl_ahorro.fld_FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaNoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.CuentaNoColumn)
        End Function
        
        Public Sub SetCuentaNoNull()
            Me(Me.tabletbl_ahorro.CuentaNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tabletbl_ahorro.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.NotasColumn)
        End Function
        
        Public Sub SetNotasNull()
            Me(Me.tabletbl_ahorro.NotasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUsuarioNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.UsuarioColumn)
        End Function
        
        Public Sub SetUsuarioNull()
            Me(Me.tabletbl_ahorro.UsuarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tabletbl_ahorro.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tabletbl_ahorro.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_IdentityNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.fld_IdentityColumn)
        End Function
        
        Public Sub Setfld_IdentityNull()
            Me(Me.tabletbl_ahorro.fld_IdentityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCajaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.CajaColumn)
        End Function
        
        Public Sub SetCajaNull()
            Me(Me.tabletbl_ahorro.CajaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDosmilNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.DosmilColumn)
        End Function
        
        Public Sub SetDosmilNull()
            Me(Me.tabletbl_ahorro.DosmilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMilNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.MilColumn)
        End Function
        
        Public Sub SetMilNull()
            Me(Me.tabletbl_ahorro.MilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuinientoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.QuinientoColumn)
        End Function
        
        Public Sub SetQuinientoNull()
            Me(Me.tabletbl_ahorro.QuinientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDosCientoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.DosCientoColumn)
        End Function
        
        Public Sub SetDosCientoNull()
            Me(Me.tabletbl_ahorro.DosCientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCienNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.CienColumn)
        End Function
        
        Public Sub SetCienNull()
            Me(Me.tabletbl_ahorro.CienColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCincuentaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.CincuentaColumn)
        End Function
        
        Public Sub SetCincuentaNull()
            Me(Me.tabletbl_ahorro.CincuentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVeinticincoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.VeinticincoColumn)
        End Function
        
        Public Sub SetVeinticincoNull()
            Me(Me.tabletbl_ahorro.VeinticincoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiezNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.DiezColumn)
        End Function
        
        Public Sub SetDiezNull()
            Me(Me.tabletbl_ahorro.DiezColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCincoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.CincoColumn)
        End Function
        
        Public Sub SetCincoNull()
            Me(Me.tabletbl_ahorro.CincoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorro.UnoColumn)
        End Function
        
        Public Sub SetUnoNull()
            Me(Me.tabletbl_ahorro.UnoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_ahorroRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tbl_ahorroRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tbl_ahorroRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tbl_ahorroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_ahorroretiroDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfld_id As DataColumn
        
        Private columnfld_FullName As DataColumn
        
        Private columnCuentaNo As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnConcepto As DataColumn
        
        Private columnUsuario As DataColumn
        
        Private columnID As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnfld_Identity As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnDosmil As DataColumn
        
        Private columnMil As DataColumn
        
        Private columnQuiniento As DataColumn
        
        Private columnDosciento As DataColumn
        
        Private columnCien As DataColumn
        
        Private columnCincuenta As DataColumn
        
        Private columnVeinticinco As DataColumn
        
        Private columnDiez As DataColumn
        
        Private columnCinco As DataColumn
        
        Private columnCheque As DataColumn
        
        Private columnUno As DataColumn
        
        Friend Sub New()
            MyBase.New("tbl_ahorroretiro")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fld_idColumn As DataColumn
            Get
                Return Me.columnfld_id
            End Get
        End Property
        
        Friend ReadOnly Property fld_FullNameColumn As DataColumn
            Get
                Return Me.columnfld_FullName
            End Get
        End Property
        
        Friend ReadOnly Property CuentaNoColumn As DataColumn
            Get
                Return Me.columnCuentaNo
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property ConceptoColumn As DataColumn
            Get
                Return Me.columnConcepto
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property fld_IdentityColumn As DataColumn
            Get
                Return Me.columnfld_Identity
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property DosmilColumn As DataColumn
            Get
                Return Me.columnDosmil
            End Get
        End Property
        
        Friend ReadOnly Property MilColumn As DataColumn
            Get
                Return Me.columnMil
            End Get
        End Property
        
        Friend ReadOnly Property QuinientoColumn As DataColumn
            Get
                Return Me.columnQuiniento
            End Get
        End Property
        
        Friend ReadOnly Property DoscientoColumn As DataColumn
            Get
                Return Me.columnDosciento
            End Get
        End Property
        
        Friend ReadOnly Property CienColumn As DataColumn
            Get
                Return Me.columnCien
            End Get
        End Property
        
        Friend ReadOnly Property CincuentaColumn As DataColumn
            Get
                Return Me.columnCincuenta
            End Get
        End Property
        
        Friend ReadOnly Property VeinticincoColumn As DataColumn
            Get
                Return Me.columnVeinticinco
            End Get
        End Property
        
        Friend ReadOnly Property DiezColumn As DataColumn
            Get
                Return Me.columnDiez
            End Get
        End Property
        
        Friend ReadOnly Property CincoColumn As DataColumn
            Get
                Return Me.columnCinco
            End Get
        End Property
        
        Friend ReadOnly Property ChequeColumn As DataColumn
            Get
                Return Me.columnCheque
            End Get
        End Property
        
        Friend ReadOnly Property UnoColumn As DataColumn
            Get
                Return Me.columnUno
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbl_ahorroretiroRow
            Get
                Return CType(Me.Rows(index),tbl_ahorroretiroRow)
            End Get
        End Property
        
        Public Event tbl_ahorroretiroRowChanged As tbl_ahorroretiroRowChangeEventHandler
        
        Public Event tbl_ahorroretiroRowChanging As tbl_ahorroretiroRowChangeEventHandler
        
        Public Event tbl_ahorroretiroRowDeleted As tbl_ahorroretiroRowChangeEventHandler
        
        Public Event tbl_ahorroretiroRowDeleting As tbl_ahorroretiroRowChangeEventHandler
        
        Public Overloads Sub Addtbl_ahorroretiroRow(ByVal row As tbl_ahorroretiroRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addtbl_ahorroretiroRow( _
                    ByVal fld_id As Integer,  _
                    ByVal fld_FullName As String,  _
                    ByVal CuentaNo As String,  _
                    ByVal Monto As Double,  _
                    ByVal Concepto As String,  _
                    ByVal Usuario As String,  _
                    ByVal ID As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal fld_Identity As String,  _
                    ByVal Descripcion As String,  _
                    ByVal Dosmil As Integer,  _
                    ByVal Mil As Double,  _
                    ByVal Quiniento As Double,  _
                    ByVal Dosciento As Double,  _
                    ByVal Cien As Double,  _
                    ByVal Cincuenta As Double,  _
                    ByVal Veinticinco As Double,  _
                    ByVal Diez As Double,  _
                    ByVal Cinco As Double,  _
                    ByVal Cheque As Double,  _
                    ByVal Uno As Double) As tbl_ahorroretiroRow
            Dim rowtbl_ahorroretiroRow As tbl_ahorroretiroRow = CType(Me.NewRow,tbl_ahorroretiroRow)
            rowtbl_ahorroretiroRow.ItemArray = New Object() {fld_id, fld_FullName, CuentaNo, Monto, Concepto, Usuario, ID, Fecha, fld_Identity, Descripcion, Dosmil, Mil, Quiniento, Dosciento, Cien, Cincuenta, Veinticinco, Diez, Cinco, Cheque, Uno}
            Me.Rows.Add(rowtbl_ahorroretiroRow)
            Return rowtbl_ahorroretiroRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tbl_ahorroretiroDataTable = CType(MyBase.Clone,tbl_ahorroretiroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tbl_ahorroretiroDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfld_id = Me.Columns("fld_id")
            Me.columnfld_FullName = Me.Columns("fld_FullName")
            Me.columnCuentaNo = Me.Columns("CuentaNo")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnConcepto = Me.Columns("Concepto")
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnID = Me.Columns("ID")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnfld_Identity = Me.Columns("fld_Identity")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnDosmil = Me.Columns("Dosmil")
            Me.columnMil = Me.Columns("Mil")
            Me.columnQuiniento = Me.Columns("Quiniento")
            Me.columnDosciento = Me.Columns("Dosciento")
            Me.columnCien = Me.Columns("Cien")
            Me.columnCincuenta = Me.Columns("Cincuenta")
            Me.columnVeinticinco = Me.Columns("Veinticinco")
            Me.columnDiez = Me.Columns("Diez")
            Me.columnCinco = Me.Columns("Cinco")
            Me.columnCheque = Me.Columns("Cheque")
            Me.columnUno = Me.Columns("Uno")
        End Sub
        
        Private Sub InitClass()
            Me.columnfld_id = New DataColumn("fld_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_id)
            Me.columnfld_FullName = New DataColumn("fld_FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_FullName)
            Me.columnCuentaNo = New DataColumn("CuentaNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaNo)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnConcepto = New DataColumn("Concepto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConcepto)
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnfld_Identity = New DataColumn("fld_Identity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_Identity)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnDosmil = New DataColumn("Dosmil", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDosmil)
            Me.columnMil = New DataColumn("Mil", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMil)
            Me.columnQuiniento = New DataColumn("Quiniento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuiniento)
            Me.columnDosciento = New DataColumn("Dosciento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDosciento)
            Me.columnCien = New DataColumn("Cien", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCien)
            Me.columnCincuenta = New DataColumn("Cincuenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCincuenta)
            Me.columnVeinticinco = New DataColumn("Veinticinco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVeinticinco)
            Me.columnDiez = New DataColumn("Diez", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiez)
            Me.columnCinco = New DataColumn("Cinco", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCinco)
            Me.columnCheque = New DataColumn("Cheque", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheque)
            Me.columnUno = New DataColumn("Uno", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUno)
        End Sub
        
        Public Function Newtbl_ahorroretiroRow() As tbl_ahorroretiroRow
            Return CType(Me.NewRow,tbl_ahorroretiroRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tbl_ahorroretiroRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tbl_ahorroretiroRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbl_ahorroretiroRowChangedEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroretiroRowChanged(Me, New tbl_ahorroretiroRowChangeEvent(CType(e.Row,tbl_ahorroretiroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbl_ahorroretiroRowChangingEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroretiroRowChanging(Me, New tbl_ahorroretiroRowChangeEvent(CType(e.Row,tbl_ahorroretiroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbl_ahorroretiroRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroretiroRowDeleted(Me, New tbl_ahorroretiroRowChangeEvent(CType(e.Row,tbl_ahorroretiroRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbl_ahorroretiroRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbl_ahorroretiroRowDeleting(Me, New tbl_ahorroretiroRowChangeEvent(CType(e.Row,tbl_ahorroretiroRow), e.Action))
            End If
        End Sub
        
        Public Sub Removetbl_ahorroretiroRow(ByVal row As tbl_ahorroretiroRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_ahorroretiroRow
        Inherits DataRow
        
        Private tabletbl_ahorroretiro As tbl_ahorroretiroDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbl_ahorroretiro = CType(Me.Table,tbl_ahorroretiroDataTable)
        End Sub
        
        Public Property fld_id As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.fld_idColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.fld_idColumn) = value
            End Set
        End Property
        
        Public Property fld_FullName As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.fld_FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.fld_FullNameColumn) = value
            End Set
        End Property
        
        Public Property CuentaNo As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.CuentaNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.CuentaNoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.MontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.MontoColumn) = value
            End Set
        End Property
        
        Public Property Concepto As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.ConceptoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.ConceptoColumn) = value
            End Set
        End Property
        
        Public Property Usuario As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.UsuarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property ID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.IDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.IDColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.FechaColumn) = value
            End Set
        End Property
        
        Public Property fld_Identity As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.fld_IdentityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.fld_IdentityColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Dosmil As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.DosmilColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.DosmilColumn) = value
            End Set
        End Property
        
        Public Property Mil As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.MilColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.MilColumn) = value
            End Set
        End Property
        
        Public Property Quiniento As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.QuinientoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.QuinientoColumn) = value
            End Set
        End Property
        
        Public Property Dosciento As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.DoscientoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.DoscientoColumn) = value
            End Set
        End Property
        
        Public Property Cien As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.CienColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.CienColumn) = value
            End Set
        End Property
        
        Public Property Cincuenta As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.CincuentaColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.CincuentaColumn) = value
            End Set
        End Property
        
        Public Property Veinticinco As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.VeinticincoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.VeinticincoColumn) = value
            End Set
        End Property
        
        Public Property Diez As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.DiezColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.DiezColumn) = value
            End Set
        End Property
        
        Public Property Cinco As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.CincoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.CincoColumn) = value
            End Set
        End Property
        
        Public Property Cheque As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.ChequeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.ChequeColumn) = value
            End Set
        End Property
        
        Public Property Uno As Double
            Get
                Try 
                    Return CType(Me(Me.tabletbl_ahorroretiro.UnoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletbl_ahorroretiro.UnoColumn) = value
            End Set
        End Property
        
        Public Function Isfld_idNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.fld_idColumn)
        End Function
        
        Public Sub Setfld_idNull()
            Me(Me.tabletbl_ahorroretiro.fld_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_FullNameNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.fld_FullNameColumn)
        End Function
        
        Public Sub Setfld_FullNameNull()
            Me(Me.tabletbl_ahorroretiro.fld_FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaNoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.CuentaNoColumn)
        End Function
        
        Public Sub SetCuentaNoNull()
            Me(Me.tabletbl_ahorroretiro.CuentaNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tabletbl_ahorroretiro.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConceptoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.ConceptoColumn)
        End Function
        
        Public Sub SetConceptoNull()
            Me(Me.tabletbl_ahorroretiro.ConceptoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUsuarioNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.UsuarioColumn)
        End Function
        
        Public Sub SetUsuarioNull()
            Me(Me.tabletbl_ahorroretiro.UsuarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tabletbl_ahorroretiro.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tabletbl_ahorroretiro.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_IdentityNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.fld_IdentityColumn)
        End Function
        
        Public Sub Setfld_IdentityNull()
            Me(Me.tabletbl_ahorroretiro.fld_IdentityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tabletbl_ahorroretiro.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDosmilNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.DosmilColumn)
        End Function
        
        Public Sub SetDosmilNull()
            Me(Me.tabletbl_ahorroretiro.DosmilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMilNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.MilColumn)
        End Function
        
        Public Sub SetMilNull()
            Me(Me.tabletbl_ahorroretiro.MilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuinientoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.QuinientoColumn)
        End Function
        
        Public Sub SetQuinientoNull()
            Me(Me.tabletbl_ahorroretiro.QuinientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDoscientoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.DoscientoColumn)
        End Function
        
        Public Sub SetDoscientoNull()
            Me(Me.tabletbl_ahorroretiro.DoscientoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCienNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.CienColumn)
        End Function
        
        Public Sub SetCienNull()
            Me(Me.tabletbl_ahorroretiro.CienColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCincuentaNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.CincuentaColumn)
        End Function
        
        Public Sub SetCincuentaNull()
            Me(Me.tabletbl_ahorroretiro.CincuentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVeinticincoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.VeinticincoColumn)
        End Function
        
        Public Sub SetVeinticincoNull()
            Me(Me.tabletbl_ahorroretiro.VeinticincoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDiezNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.DiezColumn)
        End Function
        
        Public Sub SetDiezNull()
            Me(Me.tabletbl_ahorroretiro.DiezColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCincoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.CincoColumn)
        End Function
        
        Public Sub SetCincoNull()
            Me(Me.tabletbl_ahorroretiro.CincoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChequeNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.ChequeColumn)
        End Function
        
        Public Sub SetChequeNull()
            Me(Me.tabletbl_ahorroretiro.ChequeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnoNull() As Boolean
            Return Me.IsNull(Me.tabletbl_ahorroretiro.UnoColumn)
        End Function
        
        Public Sub SetUnoNull()
            Me(Me.tabletbl_ahorroretiro.UnoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tbl_ahorroretiroRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tbl_ahorroretiroRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tbl_ahorroretiroRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tbl_ahorroretiroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ahorroAportacionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnclicod As DataColumn
        
        Private columnclicedula As DataColumn
        
        Private columnclinombre As DataColumn
        
        Private columncliapodo As DataColumn
        
        Private columnclidireccion As DataColumn
        
        Private columncliciudad As DataColumn
        
        Private columnahofecha As DataColumn
        
        Private columnahoid As DataColumn
        
        Private columnahoconcepto As DataColumn
        
        Private columnahomonto As DataColumn
        
        Private columncajactacontable As DataColumn
        
        Private columncajanombre As DataColumn
        
        Private columndepositomonto As DataColumn
        
        Friend Sub New()
            MyBase.New("ahorroAportacion")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property clicodColumn As DataColumn
            Get
                Return Me.columnclicod
            End Get
        End Property
        
        Friend ReadOnly Property clicedulaColumn As DataColumn
            Get
                Return Me.columnclicedula
            End Get
        End Property
        
        Friend ReadOnly Property clinombreColumn As DataColumn
            Get
                Return Me.columnclinombre
            End Get
        End Property
        
        Friend ReadOnly Property cliapodoColumn As DataColumn
            Get
                Return Me.columncliapodo
            End Get
        End Property
        
        Friend ReadOnly Property clidireccionColumn As DataColumn
            Get
                Return Me.columnclidireccion
            End Get
        End Property
        
        Friend ReadOnly Property cliciudadColumn As DataColumn
            Get
                Return Me.columncliciudad
            End Get
        End Property
        
        Friend ReadOnly Property ahofechaColumn As DataColumn
            Get
                Return Me.columnahofecha
            End Get
        End Property
        
        Friend ReadOnly Property ahoidColumn As DataColumn
            Get
                Return Me.columnahoid
            End Get
        End Property
        
        Friend ReadOnly Property ahoconceptoColumn As DataColumn
            Get
                Return Me.columnahoconcepto
            End Get
        End Property
        
        Friend ReadOnly Property ahomontoColumn As DataColumn
            Get
                Return Me.columnahomonto
            End Get
        End Property
        
        Friend ReadOnly Property cajactacontableColumn As DataColumn
            Get
                Return Me.columncajactacontable
            End Get
        End Property
        
        Friend ReadOnly Property cajanombreColumn As DataColumn
            Get
                Return Me.columncajanombre
            End Get
        End Property
        
        Friend ReadOnly Property depositomontoColumn As DataColumn
            Get
                Return Me.columndepositomonto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ahorroAportacionRow
            Get
                Return CType(Me.Rows(index),ahorroAportacionRow)
            End Get
        End Property
        
        Public Event ahorroAportacionRowChanged As ahorroAportacionRowChangeEventHandler
        
        Public Event ahorroAportacionRowChanging As ahorroAportacionRowChangeEventHandler
        
        Public Event ahorroAportacionRowDeleted As ahorroAportacionRowChangeEventHandler
        
        Public Event ahorroAportacionRowDeleting As ahorroAportacionRowChangeEventHandler
        
        Public Overloads Sub AddahorroAportacionRow(ByVal row As ahorroAportacionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddahorroAportacionRow(ByVal clicod As Integer, ByVal clicedula As String, ByVal clinombre As String, ByVal cliapodo As String, ByVal clidireccion As String, ByVal cliciudad As String, ByVal ahofecha As Date, ByVal ahoid As Integer, ByVal ahoconcepto As String, ByVal ahomonto As Double, ByVal cajactacontable As String, ByVal cajanombre As String, ByVal depositomonto As Double) As ahorroAportacionRow
            Dim rowahorroAportacionRow As ahorroAportacionRow = CType(Me.NewRow,ahorroAportacionRow)
            rowahorroAportacionRow.ItemArray = New Object() {clicod, clicedula, clinombre, cliapodo, clidireccion, cliciudad, ahofecha, ahoid, ahoconcepto, ahomonto, cajactacontable, cajanombre, depositomonto}
            Me.Rows.Add(rowahorroAportacionRow)
            Return rowahorroAportacionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ahorroAportacionDataTable = CType(MyBase.Clone,ahorroAportacionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ahorroAportacionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnclicod = Me.Columns("clicod")
            Me.columnclicedula = Me.Columns("clicedula")
            Me.columnclinombre = Me.Columns("clinombre")
            Me.columncliapodo = Me.Columns("cliapodo")
            Me.columnclidireccion = Me.Columns("clidireccion")
            Me.columncliciudad = Me.Columns("cliciudad")
            Me.columnahofecha = Me.Columns("ahofecha")
            Me.columnahoid = Me.Columns("ahoid")
            Me.columnahoconcepto = Me.Columns("ahoconcepto")
            Me.columnahomonto = Me.Columns("ahomonto")
            Me.columncajactacontable = Me.Columns("cajactacontable")
            Me.columncajanombre = Me.Columns("cajanombre")
            Me.columndepositomonto = Me.Columns("depositomonto")
        End Sub
        
        Private Sub InitClass()
            Me.columnclicod = New DataColumn("clicod", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclicod)
            Me.columnclicedula = New DataColumn("clicedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclicedula)
            Me.columnclinombre = New DataColumn("clinombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclinombre)
            Me.columncliapodo = New DataColumn("cliapodo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncliapodo)
            Me.columnclidireccion = New DataColumn("clidireccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclidireccion)
            Me.columncliciudad = New DataColumn("cliciudad", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncliciudad)
            Me.columnahofecha = New DataColumn("ahofecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnahofecha)
            Me.columnahoid = New DataColumn("ahoid", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnahoid)
            Me.columnahoconcepto = New DataColumn("ahoconcepto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnahoconcepto)
            Me.columnahomonto = New DataColumn("ahomonto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnahomonto)
            Me.columncajactacontable = New DataColumn("cajactacontable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncajactacontable)
            Me.columncajanombre = New DataColumn("cajanombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncajanombre)
            Me.columndepositomonto = New DataColumn("depositomonto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndepositomonto)
        End Sub
        
        Public Function NewahorroAportacionRow() As ahorroAportacionRow
            Return CType(Me.NewRow,ahorroAportacionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ahorroAportacionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ahorroAportacionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ahorroAportacionRowChangedEvent) Is Nothing) Then
                RaiseEvent ahorroAportacionRowChanged(Me, New ahorroAportacionRowChangeEvent(CType(e.Row,ahorroAportacionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ahorroAportacionRowChangingEvent) Is Nothing) Then
                RaiseEvent ahorroAportacionRowChanging(Me, New ahorroAportacionRowChangeEvent(CType(e.Row,ahorroAportacionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ahorroAportacionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ahorroAportacionRowDeleted(Me, New ahorroAportacionRowChangeEvent(CType(e.Row,ahorroAportacionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ahorroAportacionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ahorroAportacionRowDeleting(Me, New ahorroAportacionRowChangeEvent(CType(e.Row,ahorroAportacionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveahorroAportacionRow(ByVal row As ahorroAportacionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ahorroAportacionRow
        Inherits DataRow
        
        Private tableahorroAportacion As ahorroAportacionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableahorroAportacion = CType(Me.Table,ahorroAportacionDataTable)
        End Sub
        
        Public Property clicod As Integer
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.clicodColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.clicodColumn) = value
            End Set
        End Property
        
        Public Property clicedula As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.clicedulaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.clicedulaColumn) = value
            End Set
        End Property
        
        Public Property clinombre As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.clinombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.clinombreColumn) = value
            End Set
        End Property
        
        Public Property cliapodo As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.cliapodoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.cliapodoColumn) = value
            End Set
        End Property
        
        Public Property clidireccion As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.clidireccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.clidireccionColumn) = value
            End Set
        End Property
        
        Public Property cliciudad As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.cliciudadColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.cliciudadColumn) = value
            End Set
        End Property
        
        Public Property ahofecha As Date
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.ahofechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.ahofechaColumn) = value
            End Set
        End Property
        
        Public Property ahoid As Integer
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.ahoidColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.ahoidColumn) = value
            End Set
        End Property
        
        Public Property ahoconcepto As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.ahoconceptoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.ahoconceptoColumn) = value
            End Set
        End Property
        
        Public Property ahomonto As Double
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.ahomontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.ahomontoColumn) = value
            End Set
        End Property
        
        Public Property cajactacontable As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.cajactacontableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.cajactacontableColumn) = value
            End Set
        End Property
        
        Public Property cajanombre As String
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.cajanombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.cajanombreColumn) = value
            End Set
        End Property
        
        Public Property depositomonto As Double
            Get
                Try 
                    Return CType(Me(Me.tableahorroAportacion.depositomontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableahorroAportacion.depositomontoColumn) = value
            End Set
        End Property
        
        Public Function IsclicodNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.clicodColumn)
        End Function
        
        Public Sub SetclicodNull()
            Me(Me.tableahorroAportacion.clicodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclicedulaNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.clicedulaColumn)
        End Function
        
        Public Sub SetclicedulaNull()
            Me(Me.tableahorroAportacion.clicedulaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclinombreNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.clinombreColumn)
        End Function
        
        Public Sub SetclinombreNull()
            Me(Me.tableahorroAportacion.clinombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscliapodoNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.cliapodoColumn)
        End Function
        
        Public Sub SetcliapodoNull()
            Me(Me.tableahorroAportacion.cliapodoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclidireccionNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.clidireccionColumn)
        End Function
        
        Public Sub SetclidireccionNull()
            Me(Me.tableahorroAportacion.clidireccionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscliciudadNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.cliciudadColumn)
        End Function
        
        Public Sub SetcliciudadNull()
            Me(Me.tableahorroAportacion.cliciudadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsahofechaNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.ahofechaColumn)
        End Function
        
        Public Sub SetahofechaNull()
            Me(Me.tableahorroAportacion.ahofechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsahoidNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.ahoidColumn)
        End Function
        
        Public Sub SetahoidNull()
            Me(Me.tableahorroAportacion.ahoidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsahoconceptoNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.ahoconceptoColumn)
        End Function
        
        Public Sub SetahoconceptoNull()
            Me(Me.tableahorroAportacion.ahoconceptoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsahomontoNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.ahomontoColumn)
        End Function
        
        Public Sub SetahomontoNull()
            Me(Me.tableahorroAportacion.ahomontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscajactacontableNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.cajactacontableColumn)
        End Function
        
        Public Sub SetcajactacontableNull()
            Me(Me.tableahorroAportacion.cajactacontableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscajanombreNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.cajanombreColumn)
        End Function
        
        Public Sub SetcajanombreNull()
            Me(Me.tableahorroAportacion.cajanombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdepositomontoNull() As Boolean
            Return Me.IsNull(Me.tableahorroAportacion.depositomontoColumn)
        End Function
        
        Public Sub SetdepositomontoNull()
            Me(Me.tableahorroAportacion.depositomontoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ahorroAportacionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ahorroAportacionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ahorroAportacionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ahorroAportacionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class certificadosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columncertificadoID As DataColumn
        
        Private columnclienteID As DataColumn
        
        Private columnclienteCedula As DataColumn
        
        Private columnclienteNombre As DataColumn
        
        Private columncertificadoCuenta As DataColumn
        
        Private columncertificadoFechaApertura As DataColumn
        
        Private columncertificadoTiempo As DataColumn
        
        Private columncertificadoMonto As DataColumn
        
        Private columncertificadoInteres As DataColumn
        
        Friend Sub New()
            MyBase.New("certificados")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property certificadoIDColumn As DataColumn
            Get
                Return Me.columncertificadoID
            End Get
        End Property
        
        Friend ReadOnly Property clienteIDColumn As DataColumn
            Get
                Return Me.columnclienteID
            End Get
        End Property
        
        Friend ReadOnly Property clienteCedulaColumn As DataColumn
            Get
                Return Me.columnclienteCedula
            End Get
        End Property
        
        Friend ReadOnly Property clienteNombreColumn As DataColumn
            Get
                Return Me.columnclienteNombre
            End Get
        End Property
        
        Friend ReadOnly Property certificadoCuentaColumn As DataColumn
            Get
                Return Me.columncertificadoCuenta
            End Get
        End Property
        
        Friend ReadOnly Property certificadoFechaAperturaColumn As DataColumn
            Get
                Return Me.columncertificadoFechaApertura
            End Get
        End Property
        
        Friend ReadOnly Property certificadoTiempoColumn As DataColumn
            Get
                Return Me.columncertificadoTiempo
            End Get
        End Property
        
        Friend ReadOnly Property certificadoMontoColumn As DataColumn
            Get
                Return Me.columncertificadoMonto
            End Get
        End Property
        
        Friend ReadOnly Property certificadoInteresColumn As DataColumn
            Get
                Return Me.columncertificadoInteres
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As certificadosRow
            Get
                Return CType(Me.Rows(index),certificadosRow)
            End Get
        End Property
        
        Public Event certificadosRowChanged As certificadosRowChangeEventHandler
        
        Public Event certificadosRowChanging As certificadosRowChangeEventHandler
        
        Public Event certificadosRowDeleted As certificadosRowChangeEventHandler
        
        Public Event certificadosRowDeleting As certificadosRowChangeEventHandler
        
        Public Overloads Sub AddcertificadosRow(ByVal row As certificadosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcertificadosRow(ByVal certificadoID As Integer, ByVal clienteID As Integer, ByVal clienteCedula As String, ByVal clienteNombre As String, ByVal certificadoCuenta As String, ByVal certificadoFechaApertura As Date, ByVal certificadoTiempo As Integer, ByVal certificadoMonto As Double, ByVal certificadoInteres As Double) As certificadosRow
            Dim rowcertificadosRow As certificadosRow = CType(Me.NewRow,certificadosRow)
            rowcertificadosRow.ItemArray = New Object() {certificadoID, clienteID, clienteCedula, clienteNombre, certificadoCuenta, certificadoFechaApertura, certificadoTiempo, certificadoMonto, certificadoInteres}
            Me.Rows.Add(rowcertificadosRow)
            Return rowcertificadosRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As certificadosDataTable = CType(MyBase.Clone,certificadosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New certificadosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columncertificadoID = Me.Columns("certificadoID")
            Me.columnclienteID = Me.Columns("clienteID")
            Me.columnclienteCedula = Me.Columns("clienteCedula")
            Me.columnclienteNombre = Me.Columns("clienteNombre")
            Me.columncertificadoCuenta = Me.Columns("certificadoCuenta")
            Me.columncertificadoFechaApertura = Me.Columns("certificadoFechaApertura")
            Me.columncertificadoTiempo = Me.Columns("certificadoTiempo")
            Me.columncertificadoMonto = Me.Columns("certificadoMonto")
            Me.columncertificadoInteres = Me.Columns("certificadoInteres")
        End Sub
        
        Private Sub InitClass()
            Me.columncertificadoID = New DataColumn("certificadoID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncertificadoID)
            Me.columnclienteID = New DataColumn("clienteID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclienteID)
            Me.columnclienteCedula = New DataColumn("clienteCedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclienteCedula)
            Me.columnclienteNombre = New DataColumn("clienteNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclienteNombre)
            Me.columncertificadoCuenta = New DataColumn("certificadoCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncertificadoCuenta)
            Me.columncertificadoFechaApertura = New DataColumn("certificadoFechaApertura", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncertificadoFechaApertura)
            Me.columncertificadoTiempo = New DataColumn("certificadoTiempo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncertificadoTiempo)
            Me.columncertificadoMonto = New DataColumn("certificadoMonto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncertificadoMonto)
            Me.columncertificadoInteres = New DataColumn("certificadoInteres", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncertificadoInteres)
        End Sub
        
        Public Function NewcertificadosRow() As certificadosRow
            Return CType(Me.NewRow,certificadosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New certificadosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(certificadosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.certificadosRowChangedEvent) Is Nothing) Then
                RaiseEvent certificadosRowChanged(Me, New certificadosRowChangeEvent(CType(e.Row,certificadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.certificadosRowChangingEvent) Is Nothing) Then
                RaiseEvent certificadosRowChanging(Me, New certificadosRowChangeEvent(CType(e.Row,certificadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.certificadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent certificadosRowDeleted(Me, New certificadosRowChangeEvent(CType(e.Row,certificadosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.certificadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent certificadosRowDeleting(Me, New certificadosRowChangeEvent(CType(e.Row,certificadosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecertificadosRow(ByVal row As certificadosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class certificadosRow
        Inherits DataRow
        
        Private tablecertificados As certificadosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecertificados = CType(Me.Table,certificadosDataTable)
        End Sub
        
        Public Property certificadoID As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.certificadoIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.certificadoIDColumn) = value
            End Set
        End Property
        
        Public Property clienteID As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.clienteIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.clienteIDColumn) = value
            End Set
        End Property
        
        Public Property clienteCedula As String
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.clienteCedulaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.clienteCedulaColumn) = value
            End Set
        End Property
        
        Public Property clienteNombre As String
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.clienteNombreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.clienteNombreColumn) = value
            End Set
        End Property
        
        Public Property certificadoCuenta As String
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.certificadoCuentaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.certificadoCuentaColumn) = value
            End Set
        End Property
        
        Public Property certificadoFechaApertura As Date
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.certificadoFechaAperturaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.certificadoFechaAperturaColumn) = value
            End Set
        End Property
        
        Public Property certificadoTiempo As Integer
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.certificadoTiempoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.certificadoTiempoColumn) = value
            End Set
        End Property
        
        Public Property certificadoMonto As Double
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.certificadoMontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.certificadoMontoColumn) = value
            End Set
        End Property
        
        Public Property certificadoInteres As Double
            Get
                Try 
                    Return CType(Me(Me.tablecertificados.certificadoInteresColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecertificados.certificadoInteresColumn) = value
            End Set
        End Property
        
        Public Function IscertificadoIDNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.certificadoIDColumn)
        End Function
        
        Public Sub SetcertificadoIDNull()
            Me(Me.tablecertificados.certificadoIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclienteIDNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.clienteIDColumn)
        End Function
        
        Public Sub SetclienteIDNull()
            Me(Me.tablecertificados.clienteIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclienteCedulaNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.clienteCedulaColumn)
        End Function
        
        Public Sub SetclienteCedulaNull()
            Me(Me.tablecertificados.clienteCedulaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclienteNombreNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.clienteNombreColumn)
        End Function
        
        Public Sub SetclienteNombreNull()
            Me(Me.tablecertificados.clienteNombreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscertificadoCuentaNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.certificadoCuentaColumn)
        End Function
        
        Public Sub SetcertificadoCuentaNull()
            Me(Me.tablecertificados.certificadoCuentaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscertificadoFechaAperturaNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.certificadoFechaAperturaColumn)
        End Function
        
        Public Sub SetcertificadoFechaAperturaNull()
            Me(Me.tablecertificados.certificadoFechaAperturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscertificadoTiempoNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.certificadoTiempoColumn)
        End Function
        
        Public Sub SetcertificadoTiempoNull()
            Me(Me.tablecertificados.certificadoTiempoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscertificadoMontoNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.certificadoMontoColumn)
        End Function
        
        Public Sub SetcertificadoMontoNull()
            Me(Me.tablecertificados.certificadoMontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscertificadoInteresNull() As Boolean
            Return Me.IsNull(Me.tablecertificados.certificadoInteresColumn)
        End Function
        
        Public Sub SetcertificadoInteresNull()
            Me(Me.tablecertificados.certificadoInteresColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class certificadosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As certificadosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As certificadosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As certificadosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class solicitudcreditoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnFechaCreada As DataColumn
        
        Private columnFechaAprobacion As DataColumn
        
        Private columnCreadoPor As DataColumn
        
        Private columnClasificacion As DataColumn
        
        Private columnFechaInicio As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnInteres As DataColumn
        
        Private columnCantCuotas As DataColumn
        
        Private columnMontoCuotas As DataColumn
        
        Private columnNotas As DataColumn
        
        Private columnSocio As DataColumn
        
        Private columnEstado As DataColumn
        
        Private columnAprobadoPOr As DataColumn
        
        Private columnCondicion As DataColumn
        
        Private columnMontoSolicitado As DataColumn
        
        Private columnSeguro As DataColumn
        
        Private columnMontolegal As DataColumn
        
        Friend Sub New()
            MyBase.New("solicitudcredito")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property FechaCreadaColumn As DataColumn
            Get
                Return Me.columnFechaCreada
            End Get
        End Property
        
        Friend ReadOnly Property FechaAprobacionColumn As DataColumn
            Get
                Return Me.columnFechaAprobacion
            End Get
        End Property
        
        Friend ReadOnly Property CreadoPorColumn As DataColumn
            Get
                Return Me.columnCreadoPor
            End Get
        End Property
        
        Friend ReadOnly Property ClasificacionColumn As DataColumn
            Get
                Return Me.columnClasificacion
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicioColumn As DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property InteresColumn As DataColumn
            Get
                Return Me.columnInteres
            End Get
        End Property
        
        Friend ReadOnly Property CantCuotasColumn As DataColumn
            Get
                Return Me.columnCantCuotas
            End Get
        End Property
        
        Friend ReadOnly Property MontoCuotasColumn As DataColumn
            Get
                Return Me.columnMontoCuotas
            End Get
        End Property
        
        Friend ReadOnly Property NotasColumn As DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        Friend ReadOnly Property SocioColumn As DataColumn
            Get
                Return Me.columnSocio
            End Get
        End Property
        
        Friend ReadOnly Property EstadoColumn As DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        Friend ReadOnly Property AprobadoPOrColumn As DataColumn
            Get
                Return Me.columnAprobadoPOr
            End Get
        End Property
        
        Friend ReadOnly Property CondicionColumn As DataColumn
            Get
                Return Me.columnCondicion
            End Get
        End Property
        
        Friend ReadOnly Property MontoSolicitadoColumn As DataColumn
            Get
                Return Me.columnMontoSolicitado
            End Get
        End Property
        
        Friend ReadOnly Property SeguroColumn As DataColumn
            Get
                Return Me.columnSeguro
            End Get
        End Property
        
        Friend ReadOnly Property MontolegalColumn As DataColumn
            Get
                Return Me.columnMontolegal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As solicitudcreditoRow
            Get
                Return CType(Me.Rows(index),solicitudcreditoRow)
            End Get
        End Property
        
        Public Event solicitudcreditoRowChanged As solicitudcreditoRowChangeEventHandler
        
        Public Event solicitudcreditoRowChanging As solicitudcreditoRowChangeEventHandler
        
        Public Event solicitudcreditoRowDeleted As solicitudcreditoRowChangeEventHandler
        
        Public Event solicitudcreditoRowDeleting As solicitudcreditoRowChangeEventHandler
        
        Public Overloads Sub AddsolicitudcreditoRow(ByVal row As solicitudcreditoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddsolicitudcreditoRow( _
                    ByVal Id As Integer,  _
                    ByVal FechaCreada As Date,  _
                    ByVal FechaAprobacion As Date,  _
                    ByVal CreadoPor As Integer,  _
                    ByVal Clasificacion As String,  _
                    ByVal FechaInicio As Date,  _
                    ByVal Monto As Decimal,  _
                    ByVal Interes As Decimal,  _
                    ByVal CantCuotas As Integer,  _
                    ByVal MontoCuotas As Decimal,  _
                    ByVal Notas As String,  _
                    ByVal Socio As Integer,  _
                    ByVal Estado As String,  _
                    ByVal AprobadoPOr As Integer,  _
                    ByVal Condicion As String,  _
                    ByVal MontoSolicitado As Decimal,  _
                    ByVal Seguro As Decimal,  _
                    ByVal Montolegal As Decimal) As solicitudcreditoRow
            Dim rowsolicitudcreditoRow As solicitudcreditoRow = CType(Me.NewRow,solicitudcreditoRow)
            rowsolicitudcreditoRow.ItemArray = New Object() {Id, FechaCreada, FechaAprobacion, CreadoPor, Clasificacion, FechaInicio, Monto, Interes, CantCuotas, MontoCuotas, Notas, Socio, Estado, AprobadoPOr, Condicion, MontoSolicitado, Seguro, Montolegal}
            Me.Rows.Add(rowsolicitudcreditoRow)
            Return rowsolicitudcreditoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As solicitudcreditoDataTable = CType(MyBase.Clone,solicitudcreditoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New solicitudcreditoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnFechaCreada = Me.Columns("FechaCreada")
            Me.columnFechaAprobacion = Me.Columns("FechaAprobacion")
            Me.columnCreadoPor = Me.Columns("CreadoPor")
            Me.columnClasificacion = Me.Columns("Clasificacion")
            Me.columnFechaInicio = Me.Columns("FechaInicio")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnInteres = Me.Columns("Interes")
            Me.columnCantCuotas = Me.Columns("CantCuotas")
            Me.columnMontoCuotas = Me.Columns("MontoCuotas")
            Me.columnNotas = Me.Columns("Notas")
            Me.columnSocio = Me.Columns("Socio")
            Me.columnEstado = Me.Columns("Estado")
            Me.columnAprobadoPOr = Me.Columns("AprobadoPOr")
            Me.columnCondicion = Me.Columns("Condicion")
            Me.columnMontoSolicitado = Me.Columns("MontoSolicitado")
            Me.columnSeguro = Me.Columns("Seguro")
            Me.columnMontolegal = Me.Columns("Montolegal")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnFechaCreada = New DataColumn("FechaCreada", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaCreada)
            Me.columnFechaAprobacion = New DataColumn("FechaAprobacion", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaAprobacion)
            Me.columnCreadoPor = New DataColumn("CreadoPor", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreadoPor)
            Me.columnClasificacion = New DataColumn("Clasificacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClasificacion)
            Me.columnFechaInicio = New DataColumn("FechaInicio", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicio)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnInteres = New DataColumn("Interes", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInteres)
            Me.columnCantCuotas = New DataColumn("CantCuotas", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCantCuotas)
            Me.columnMontoCuotas = New DataColumn("MontoCuotas", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoCuotas)
            Me.columnNotas = New DataColumn("Notas", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotas)
            Me.columnSocio = New DataColumn("Socio", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSocio)
            Me.columnEstado = New DataColumn("Estado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado)
            Me.columnAprobadoPOr = New DataColumn("AprobadoPOr", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAprobadoPOr)
            Me.columnCondicion = New DataColumn("Condicion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondicion)
            Me.columnMontoSolicitado = New DataColumn("MontoSolicitado", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoSolicitado)
            Me.columnSeguro = New DataColumn("Seguro", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSeguro)
            Me.columnMontolegal = New DataColumn("Montolegal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontolegal)
        End Sub
        
        Public Function NewsolicitudcreditoRow() As solicitudcreditoRow
            Return CType(Me.NewRow,solicitudcreditoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New solicitudcreditoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(solicitudcreditoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.solicitudcreditoRowChangedEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoRowChanged(Me, New solicitudcreditoRowChangeEvent(CType(e.Row,solicitudcreditoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.solicitudcreditoRowChangingEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoRowChanging(Me, New solicitudcreditoRowChangeEvent(CType(e.Row,solicitudcreditoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.solicitudcreditoRowDeletedEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoRowDeleted(Me, New solicitudcreditoRowChangeEvent(CType(e.Row,solicitudcreditoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.solicitudcreditoRowDeletingEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoRowDeleting(Me, New solicitudcreditoRowChangeEvent(CType(e.Row,solicitudcreditoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovesolicitudcreditoRow(ByVal row As solicitudcreditoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class solicitudcreditoRow
        Inherits DataRow
        
        Private tablesolicitudcredito As solicitudcreditoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesolicitudcredito = CType(Me.Table,solicitudcreditoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.IdColumn) = value
            End Set
        End Property
        
        Public Property FechaCreada As Date
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.FechaCreadaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.FechaCreadaColumn) = value
            End Set
        End Property
        
        Public Property FechaAprobacion As Date
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.FechaAprobacionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.FechaAprobacionColumn) = value
            End Set
        End Property
        
        Public Property CreadoPor As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.CreadoPorColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.CreadoPorColumn) = value
            End Set
        End Property
        
        Public Property Clasificacion As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.ClasificacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.ClasificacionColumn) = value
            End Set
        End Property
        
        Public Property FechaInicio As Date
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.FechaInicioColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.FechaInicioColumn) = value
            End Set
        End Property
        
        Public Property Monto As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.MontoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.MontoColumn) = value
            End Set
        End Property
        
        Public Property Interes As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.InteresColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.InteresColumn) = value
            End Set
        End Property
        
        Public Property CantCuotas As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.CantCuotasColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.CantCuotasColumn) = value
            End Set
        End Property
        
        Public Property MontoCuotas As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.MontoCuotasColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.MontoCuotasColumn) = value
            End Set
        End Property
        
        Public Property Notas As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.NotasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.NotasColumn) = value
            End Set
        End Property
        
        Public Property Socio As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.SocioColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.SocioColumn) = value
            End Set
        End Property
        
        Public Property Estado As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.EstadoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.EstadoColumn) = value
            End Set
        End Property
        
        Public Property AprobadoPOr As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.AprobadoPOrColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.AprobadoPOrColumn) = value
            End Set
        End Property
        
        Public Property Condicion As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.CondicionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.CondicionColumn) = value
            End Set
        End Property
        
        Public Property MontoSolicitado As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.MontoSolicitadoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.MontoSolicitadoColumn) = value
            End Set
        End Property
        
        Public Property Seguro As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.SeguroColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.SeguroColumn) = value
            End Set
        End Property
        
        Public Property Montolegal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcredito.MontolegalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcredito.MontolegalColumn) = value
            End Set
        End Property
        
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.IdColumn)
        End Function
        
        Public Sub SetIdNull()
            Me(Me.tablesolicitudcredito.IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaCreadaNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.FechaCreadaColumn)
        End Function
        
        Public Sub SetFechaCreadaNull()
            Me(Me.tablesolicitudcredito.FechaCreadaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.FechaAprobacionColumn)
        End Function
        
        Public Sub SetFechaAprobacionNull()
            Me(Me.tablesolicitudcredito.FechaAprobacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCreadoPorNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.CreadoPorColumn)
        End Function
        
        Public Sub SetCreadoPorNull()
            Me(Me.tablesolicitudcredito.CreadoPorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClasificacionNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.ClasificacionColumn)
        End Function
        
        Public Sub SetClasificacionNull()
            Me(Me.tablesolicitudcredito.ClasificacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaInicioNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.FechaInicioColumn)
        End Function
        
        Public Sub SetFechaInicioNull()
            Me(Me.tablesolicitudcredito.FechaInicioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tablesolicitudcredito.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInteresNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.InteresColumn)
        End Function
        
        Public Sub SetInteresNull()
            Me(Me.tablesolicitudcredito.InteresColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCantCuotasNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.CantCuotasColumn)
        End Function
        
        Public Sub SetCantCuotasNull()
            Me(Me.tablesolicitudcredito.CantCuotasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoCuotasNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.MontoCuotasColumn)
        End Function
        
        Public Sub SetMontoCuotasNull()
            Me(Me.tablesolicitudcredito.MontoCuotasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.NotasColumn)
        End Function
        
        Public Sub SetNotasNull()
            Me(Me.tablesolicitudcredito.NotasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSocioNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.SocioColumn)
        End Function
        
        Public Sub SetSocioNull()
            Me(Me.tablesolicitudcredito.SocioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.EstadoColumn)
        End Function
        
        Public Sub SetEstadoNull()
            Me(Me.tablesolicitudcredito.EstadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAprobadoPOrNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.AprobadoPOrColumn)
        End Function
        
        Public Sub SetAprobadoPOrNull()
            Me(Me.tablesolicitudcredito.AprobadoPOrColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCondicionNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.CondicionColumn)
        End Function
        
        Public Sub SetCondicionNull()
            Me(Me.tablesolicitudcredito.CondicionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoSolicitadoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.MontoSolicitadoColumn)
        End Function
        
        Public Sub SetMontoSolicitadoNull()
            Me(Me.tablesolicitudcredito.MontoSolicitadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSeguroNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.SeguroColumn)
        End Function
        
        Public Sub SetSeguroNull()
            Me(Me.tablesolicitudcredito.SeguroColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontolegalNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcredito.MontolegalColumn)
        End Function
        
        Public Sub SetMontolegalNull()
            Me(Me.tablesolicitudcredito.MontolegalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class solicitudcreditoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As solicitudcreditoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As solicitudcreditoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As solicitudcreditoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class solicitudcreditoclienteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnfld_id As DataColumn
        
        Private columnfld_FullName As DataColumn
        
        Private columnfld_apodo As DataColumn
        
        Private columnfld_Identity As DataColumn
        
        Private columnfld_Phone As DataColumn
        
        Private columnfld_Phone2 As DataColumn
        
        Private columnfld_Address As DataColumn
        
        Private columnfld_City As DataColumn
        
        Private columnfld_Status As DataColumn
        
        Private columnfld_bce As DataColumn
        
        Private columnfld_cod_zona As DataColumn
        
        Private columnfld_zona As DataColumn
        
        Private columnfld_nombre_con As DataColumn
        
        Private columnfld_apodo_con As DataColumn
        
        Private columnfld_cedula_con As DataColumn
        
        Private columnfld_telefono_con As DataColumn
        
        Private columnfld_celular_con As DataColumn
        
        Private columnfld_ref_personales_cliente As DataColumn
        
        Private columnfld_ref_comerciales_cliente As DataColumn
        
        Private columnfld_nombre_gar As DataColumn
        
        Private columnfld_apodo_gar As DataColumn
        
        Private columnfld_cedula_gar As DataColumn
        
        Private columnfld_telefono_gar As DataColumn
        
        Private columnfld_celular_gar As DataColumn
        
        Private columnfld_direccion_gar As DataColumn
        
        Private columnfld_ciudad_gar As DataColumn
        
        Private columnfld_ref_personales_gar As DataColumn
        
        Private columnfld_ref_comerciales_gar As DataColumn
        
        Private columnfld_ingresos_mesuales As DataColumn
        
        Private columnfld_nombre_banco1 As DataColumn
        
        Private columnfld_cuenta_banco1 As DataColumn
        
        Private columnfld_nombre_banco2 As DataColumn
        
        Private columnfld_cuenta_banco2 As DataColumn
        
        Private columnfld_otra_informacion As DataColumn
        
        Private columnfld_nombre_con_gar As DataColumn
        
        Private columnfld_apodo_con_gar As DataColumn
        
        Private columnfld_cedula_con_gar As DataColumn
        
        Private columnfld_telefono_con_gar As DataColumn
        
        Private columnfld_celular_con_gar As DataColumn
        
        Private columnfld_edad As DataColumn
        
        Private columnfld_estado_civil As DataColumn
        
        Private columnfld_edad_gar As DataColumn
        
        Private columnfld_estado_civil_gar As DataColumn
        
        Private columnfld_ocupacion_cliente As DataColumn
        
        Private columnfld_ocupacion_gar As DataColumn
        
        Private columnfld_sector_id As DataColumn
        
        Private columnfld_sector As DataColumn
        
        Private columnfld_categoria As DataColumn
        
        Private columnfld_limite As DataColumn
        
        Private columnPuesto As DataColumn
        
        Private columnTimpoTrabajo As DataColumn
        
        Private columnReferidoPor As DataColumn
        
        Private columnOriundo As DataColumn
        
        Private columnDataCredito As DataColumn
        
        Private columnctaContable As DataColumn
        
        Private columnemail As DataColumn
        
        Private columnfechaIngreso As DataColumn
        
        Friend Sub New()
            MyBase.New("solicitudcreditocliente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property fld_idColumn As DataColumn
            Get
                Return Me.columnfld_id
            End Get
        End Property
        
        Friend ReadOnly Property fld_FullNameColumn As DataColumn
            Get
                Return Me.columnfld_FullName
            End Get
        End Property
        
        Friend ReadOnly Property fld_apodoColumn As DataColumn
            Get
                Return Me.columnfld_apodo
            End Get
        End Property
        
        Friend ReadOnly Property fld_IdentityColumn As DataColumn
            Get
                Return Me.columnfld_Identity
            End Get
        End Property
        
        Friend ReadOnly Property fld_PhoneColumn As DataColumn
            Get
                Return Me.columnfld_Phone
            End Get
        End Property
        
        Friend ReadOnly Property fld_Phone2Column As DataColumn
            Get
                Return Me.columnfld_Phone2
            End Get
        End Property
        
        Friend ReadOnly Property fld_AddressColumn As DataColumn
            Get
                Return Me.columnfld_Address
            End Get
        End Property
        
        Friend ReadOnly Property fld_CityColumn As DataColumn
            Get
                Return Me.columnfld_City
            End Get
        End Property
        
        Friend ReadOnly Property fld_StatusColumn As DataColumn
            Get
                Return Me.columnfld_Status
            End Get
        End Property
        
        Friend ReadOnly Property fld_bceColumn As DataColumn
            Get
                Return Me.columnfld_bce
            End Get
        End Property
        
        Friend ReadOnly Property fld_cod_zonaColumn As DataColumn
            Get
                Return Me.columnfld_cod_zona
            End Get
        End Property
        
        Friend ReadOnly Property fld_zonaColumn As DataColumn
            Get
                Return Me.columnfld_zona
            End Get
        End Property
        
        Friend ReadOnly Property fld_nombre_conColumn As DataColumn
            Get
                Return Me.columnfld_nombre_con
            End Get
        End Property
        
        Friend ReadOnly Property fld_apodo_conColumn As DataColumn
            Get
                Return Me.columnfld_apodo_con
            End Get
        End Property
        
        Friend ReadOnly Property fld_cedula_conColumn As DataColumn
            Get
                Return Me.columnfld_cedula_con
            End Get
        End Property
        
        Friend ReadOnly Property fld_telefono_conColumn As DataColumn
            Get
                Return Me.columnfld_telefono_con
            End Get
        End Property
        
        Friend ReadOnly Property fld_celular_conColumn As DataColumn
            Get
                Return Me.columnfld_celular_con
            End Get
        End Property
        
        Friend ReadOnly Property fld_ref_personales_clienteColumn As DataColumn
            Get
                Return Me.columnfld_ref_personales_cliente
            End Get
        End Property
        
        Friend ReadOnly Property fld_ref_comerciales_clienteColumn As DataColumn
            Get
                Return Me.columnfld_ref_comerciales_cliente
            End Get
        End Property
        
        Friend ReadOnly Property fld_nombre_garColumn As DataColumn
            Get
                Return Me.columnfld_nombre_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_apodo_garColumn As DataColumn
            Get
                Return Me.columnfld_apodo_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_cedula_garColumn As DataColumn
            Get
                Return Me.columnfld_cedula_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_telefono_garColumn As DataColumn
            Get
                Return Me.columnfld_telefono_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_celular_garColumn As DataColumn
            Get
                Return Me.columnfld_celular_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_direccion_garColumn As DataColumn
            Get
                Return Me.columnfld_direccion_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_ciudad_garColumn As DataColumn
            Get
                Return Me.columnfld_ciudad_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_ref_personales_garColumn As DataColumn
            Get
                Return Me.columnfld_ref_personales_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_ref_comerciales_garColumn As DataColumn
            Get
                Return Me.columnfld_ref_comerciales_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_ingresos_mesualesColumn As DataColumn
            Get
                Return Me.columnfld_ingresos_mesuales
            End Get
        End Property
        
        Friend ReadOnly Property fld_nombre_banco1Column As DataColumn
            Get
                Return Me.columnfld_nombre_banco1
            End Get
        End Property
        
        Friend ReadOnly Property fld_cuenta_banco1Column As DataColumn
            Get
                Return Me.columnfld_cuenta_banco1
            End Get
        End Property
        
        Friend ReadOnly Property fld_nombre_banco2Column As DataColumn
            Get
                Return Me.columnfld_nombre_banco2
            End Get
        End Property
        
        Friend ReadOnly Property fld_cuenta_banco2Column As DataColumn
            Get
                Return Me.columnfld_cuenta_banco2
            End Get
        End Property
        
        Friend ReadOnly Property fld_otra_informacionColumn As DataColumn
            Get
                Return Me.columnfld_otra_informacion
            End Get
        End Property
        
        Friend ReadOnly Property fld_nombre_con_garColumn As DataColumn
            Get
                Return Me.columnfld_nombre_con_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_apodo_con_garColumn As DataColumn
            Get
                Return Me.columnfld_apodo_con_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_cedula_con_garColumn As DataColumn
            Get
                Return Me.columnfld_cedula_con_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_telefono_con_garColumn As DataColumn
            Get
                Return Me.columnfld_telefono_con_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_celular_con_garColumn As DataColumn
            Get
                Return Me.columnfld_celular_con_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_edadColumn As DataColumn
            Get
                Return Me.columnfld_edad
            End Get
        End Property
        
        Friend ReadOnly Property fld_estado_civilColumn As DataColumn
            Get
                Return Me.columnfld_estado_civil
            End Get
        End Property
        
        Friend ReadOnly Property fld_edad_garColumn As DataColumn
            Get
                Return Me.columnfld_edad_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_estado_civil_garColumn As DataColumn
            Get
                Return Me.columnfld_estado_civil_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_ocupacion_clienteColumn As DataColumn
            Get
                Return Me.columnfld_ocupacion_cliente
            End Get
        End Property
        
        Friend ReadOnly Property fld_ocupacion_garColumn As DataColumn
            Get
                Return Me.columnfld_ocupacion_gar
            End Get
        End Property
        
        Friend ReadOnly Property fld_sector_idColumn As DataColumn
            Get
                Return Me.columnfld_sector_id
            End Get
        End Property
        
        Friend ReadOnly Property fld_sectorColumn As DataColumn
            Get
                Return Me.columnfld_sector
            End Get
        End Property
        
        Friend ReadOnly Property fld_categoriaColumn As DataColumn
            Get
                Return Me.columnfld_categoria
            End Get
        End Property
        
        Friend ReadOnly Property fld_limiteColumn As DataColumn
            Get
                Return Me.columnfld_limite
            End Get
        End Property
        
        Friend ReadOnly Property PuestoColumn As DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        Friend ReadOnly Property TimpoTrabajoColumn As DataColumn
            Get
                Return Me.columnTimpoTrabajo
            End Get
        End Property
        
        Friend ReadOnly Property ReferidoPorColumn As DataColumn
            Get
                Return Me.columnReferidoPor
            End Get
        End Property
        
        Friend ReadOnly Property OriundoColumn As DataColumn
            Get
                Return Me.columnOriundo
            End Get
        End Property
        
        Friend ReadOnly Property DataCreditoColumn As DataColumn
            Get
                Return Me.columnDataCredito
            End Get
        End Property
        
        Friend ReadOnly Property ctaContableColumn As DataColumn
            Get
                Return Me.columnctaContable
            End Get
        End Property
        
        Friend ReadOnly Property emailColumn As DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        Friend ReadOnly Property fechaIngresoColumn As DataColumn
            Get
                Return Me.columnfechaIngreso
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As solicitudcreditoclienteRow
            Get
                Return CType(Me.Rows(index),solicitudcreditoclienteRow)
            End Get
        End Property
        
        Public Event solicitudcreditoclienteRowChanged As solicitudcreditoclienteRowChangeEventHandler
        
        Public Event solicitudcreditoclienteRowChanging As solicitudcreditoclienteRowChangeEventHandler
        
        Public Event solicitudcreditoclienteRowDeleted As solicitudcreditoclienteRowChangeEventHandler
        
        Public Event solicitudcreditoclienteRowDeleting As solicitudcreditoclienteRowChangeEventHandler
        
        Public Overloads Sub AddsolicitudcreditoclienteRow(ByVal row As solicitudcreditoclienteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddsolicitudcreditoclienteRow( _
                    ByVal fld_FullName As String,  _
                    ByVal fld_apodo As String,  _
                    ByVal fld_Identity As String,  _
                    ByVal fld_Phone As String,  _
                    ByVal fld_Phone2 As String,  _
                    ByVal fld_Address As String,  _
                    ByVal fld_City As String,  _
                    ByVal fld_Status As String,  _
                    ByVal fld_bce As Double,  _
                    ByVal fld_cod_zona As Integer,  _
                    ByVal fld_zona As String,  _
                    ByVal fld_nombre_con As String,  _
                    ByVal fld_apodo_con As String,  _
                    ByVal fld_cedula_con As String,  _
                    ByVal fld_telefono_con As String,  _
                    ByVal fld_celular_con As String,  _
                    ByVal fld_ref_personales_cliente As String,  _
                    ByVal fld_ref_comerciales_cliente As String,  _
                    ByVal fld_nombre_gar As String,  _
                    ByVal fld_apodo_gar As String,  _
                    ByVal fld_cedula_gar As String,  _
                    ByVal fld_telefono_gar As String,  _
                    ByVal fld_celular_gar As String,  _
                    ByVal fld_direccion_gar As String,  _
                    ByVal fld_ciudad_gar As String,  _
                    ByVal fld_ref_personales_gar As String,  _
                    ByVal fld_ref_comerciales_gar As String,  _
                    ByVal fld_ingresos_mesuales As Double,  _
                    ByVal fld_nombre_banco1 As String,  _
                    ByVal fld_cuenta_banco1 As String,  _
                    ByVal fld_nombre_banco2 As String,  _
                    ByVal fld_cuenta_banco2 As String,  _
                    ByVal fld_otra_informacion As String,  _
                    ByVal fld_nombre_con_gar As String,  _
                    ByVal fld_apodo_con_gar As String,  _
                    ByVal fld_cedula_con_gar As String,  _
                    ByVal fld_telefono_con_gar As String,  _
                    ByVal fld_celular_con_gar As String,  _
                    ByVal fld_edad As Integer,  _
                    ByVal fld_estado_civil As String,  _
                    ByVal fld_edad_gar As String,  _
                    ByVal fld_estado_civil_gar As String,  _
                    ByVal fld_ocupacion_cliente As String,  _
                    ByVal fld_ocupacion_gar As String,  _
                    ByVal fld_sector_id As Integer,  _
                    ByVal fld_sector As String,  _
                    ByVal fld_categoria As String,  _
                    ByVal fld_limite As Decimal,  _
                    ByVal Puesto As String,  _
                    ByVal TimpoTrabajo As String,  _
                    ByVal ReferidoPor As String,  _
                    ByVal Oriundo As String,  _
                    ByVal DataCredito As String,  _
                    ByVal ctaContable As Integer,  _
                    ByVal email As String,  _
                    ByVal fechaIngreso As Date) As solicitudcreditoclienteRow
            Dim rowsolicitudcreditoclienteRow As solicitudcreditoclienteRow = CType(Me.NewRow,solicitudcreditoclienteRow)
            rowsolicitudcreditoclienteRow.ItemArray = New Object() {Nothing, fld_FullName, fld_apodo, fld_Identity, fld_Phone, fld_Phone2, fld_Address, fld_City, fld_Status, fld_bce, fld_cod_zona, fld_zona, fld_nombre_con, fld_apodo_con, fld_cedula_con, fld_telefono_con, fld_celular_con, fld_ref_personales_cliente, fld_ref_comerciales_cliente, fld_nombre_gar, fld_apodo_gar, fld_cedula_gar, fld_telefono_gar, fld_celular_gar, fld_direccion_gar, fld_ciudad_gar, fld_ref_personales_gar, fld_ref_comerciales_gar, fld_ingresos_mesuales, fld_nombre_banco1, fld_cuenta_banco1, fld_nombre_banco2, fld_cuenta_banco2, fld_otra_informacion, fld_nombre_con_gar, fld_apodo_con_gar, fld_cedula_con_gar, fld_telefono_con_gar, fld_celular_con_gar, fld_edad, fld_estado_civil, fld_edad_gar, fld_estado_civil_gar, fld_ocupacion_cliente, fld_ocupacion_gar, fld_sector_id, fld_sector, fld_categoria, fld_limite, Puesto, TimpoTrabajo, ReferidoPor, Oriundo, DataCredito, ctaContable, email, fechaIngreso}
            Me.Rows.Add(rowsolicitudcreditoclienteRow)
            Return rowsolicitudcreditoclienteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As solicitudcreditoclienteDataTable = CType(MyBase.Clone,solicitudcreditoclienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New solicitudcreditoclienteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnfld_id = Me.Columns("fld_id")
            Me.columnfld_FullName = Me.Columns("fld_FullName")
            Me.columnfld_apodo = Me.Columns("fld_apodo")
            Me.columnfld_Identity = Me.Columns("fld_Identity")
            Me.columnfld_Phone = Me.Columns("fld_Phone")
            Me.columnfld_Phone2 = Me.Columns("fld_Phone2")
            Me.columnfld_Address = Me.Columns("fld_Address")
            Me.columnfld_City = Me.Columns("fld_City")
            Me.columnfld_Status = Me.Columns("fld_Status")
            Me.columnfld_bce = Me.Columns("fld_bce")
            Me.columnfld_cod_zona = Me.Columns("fld_cod_zona")
            Me.columnfld_zona = Me.Columns("fld_zona")
            Me.columnfld_nombre_con = Me.Columns("fld_nombre_con")
            Me.columnfld_apodo_con = Me.Columns("fld_apodo_con")
            Me.columnfld_cedula_con = Me.Columns("fld_cedula_con")
            Me.columnfld_telefono_con = Me.Columns("fld_telefono_con")
            Me.columnfld_celular_con = Me.Columns("fld_celular_con")
            Me.columnfld_ref_personales_cliente = Me.Columns("fld_ref_personales_cliente")
            Me.columnfld_ref_comerciales_cliente = Me.Columns("fld_ref_comerciales_cliente")
            Me.columnfld_nombre_gar = Me.Columns("fld_nombre_gar")
            Me.columnfld_apodo_gar = Me.Columns("fld_apodo_gar")
            Me.columnfld_cedula_gar = Me.Columns("fld_cedula_gar")
            Me.columnfld_telefono_gar = Me.Columns("fld_telefono_gar")
            Me.columnfld_celular_gar = Me.Columns("fld_celular_gar")
            Me.columnfld_direccion_gar = Me.Columns("fld_direccion_gar")
            Me.columnfld_ciudad_gar = Me.Columns("fld_ciudad_gar")
            Me.columnfld_ref_personales_gar = Me.Columns("fld_ref_personales_gar")
            Me.columnfld_ref_comerciales_gar = Me.Columns("fld_ref_comerciales_gar")
            Me.columnfld_ingresos_mesuales = Me.Columns("fld_ingresos_mesuales")
            Me.columnfld_nombre_banco1 = Me.Columns("fld_nombre_banco1")
            Me.columnfld_cuenta_banco1 = Me.Columns("fld_cuenta_banco1")
            Me.columnfld_nombre_banco2 = Me.Columns("fld_nombre_banco2")
            Me.columnfld_cuenta_banco2 = Me.Columns("fld_cuenta_banco2")
            Me.columnfld_otra_informacion = Me.Columns("fld_otra_informacion")
            Me.columnfld_nombre_con_gar = Me.Columns("fld_nombre_con_gar")
            Me.columnfld_apodo_con_gar = Me.Columns("fld_apodo_con_gar")
            Me.columnfld_cedula_con_gar = Me.Columns("fld_cedula_con_gar")
            Me.columnfld_telefono_con_gar = Me.Columns("fld_telefono_con_gar")
            Me.columnfld_celular_con_gar = Me.Columns("fld_celular_con_gar")
            Me.columnfld_edad = Me.Columns("fld_edad")
            Me.columnfld_estado_civil = Me.Columns("fld_estado_civil")
            Me.columnfld_edad_gar = Me.Columns("fld_edad_gar")
            Me.columnfld_estado_civil_gar = Me.Columns("fld_estado_civil_gar")
            Me.columnfld_ocupacion_cliente = Me.Columns("fld_ocupacion_cliente")
            Me.columnfld_ocupacion_gar = Me.Columns("fld_ocupacion_gar")
            Me.columnfld_sector_id = Me.Columns("fld_sector_id")
            Me.columnfld_sector = Me.Columns("fld_sector")
            Me.columnfld_categoria = Me.Columns("fld_categoria")
            Me.columnfld_limite = Me.Columns("fld_limite")
            Me.columnPuesto = Me.Columns("Puesto")
            Me.columnTimpoTrabajo = Me.Columns("TimpoTrabajo")
            Me.columnReferidoPor = Me.Columns("ReferidoPor")
            Me.columnOriundo = Me.Columns("Oriundo")
            Me.columnDataCredito = Me.Columns("DataCredito")
            Me.columnctaContable = Me.Columns("ctaContable")
            Me.columnemail = Me.Columns("email")
            Me.columnfechaIngreso = Me.Columns("fechaIngreso")
        End Sub
        
        Private Sub InitClass()
            Me.columnfld_id = New DataColumn("fld_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_id)
            Me.columnfld_FullName = New DataColumn("fld_FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_FullName)
            Me.columnfld_apodo = New DataColumn("fld_apodo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_apodo)
            Me.columnfld_Identity = New DataColumn("fld_Identity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_Identity)
            Me.columnfld_Phone = New DataColumn("fld_Phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_Phone)
            Me.columnfld_Phone2 = New DataColumn("fld_Phone2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_Phone2)
            Me.columnfld_Address = New DataColumn("fld_Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_Address)
            Me.columnfld_City = New DataColumn("fld_City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_City)
            Me.columnfld_Status = New DataColumn("fld_Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_Status)
            Me.columnfld_bce = New DataColumn("fld_bce", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_bce)
            Me.columnfld_cod_zona = New DataColumn("fld_cod_zona", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_cod_zona)
            Me.columnfld_zona = New DataColumn("fld_zona", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_zona)
            Me.columnfld_nombre_con = New DataColumn("fld_nombre_con", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_nombre_con)
            Me.columnfld_apodo_con = New DataColumn("fld_apodo_con", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_apodo_con)
            Me.columnfld_cedula_con = New DataColumn("fld_cedula_con", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_cedula_con)
            Me.columnfld_telefono_con = New DataColumn("fld_telefono_con", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_telefono_con)
            Me.columnfld_celular_con = New DataColumn("fld_celular_con", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_celular_con)
            Me.columnfld_ref_personales_cliente = New DataColumn("fld_ref_personales_cliente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ref_personales_cliente)
            Me.columnfld_ref_comerciales_cliente = New DataColumn("fld_ref_comerciales_cliente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ref_comerciales_cliente)
            Me.columnfld_nombre_gar = New DataColumn("fld_nombre_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_nombre_gar)
            Me.columnfld_apodo_gar = New DataColumn("fld_apodo_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_apodo_gar)
            Me.columnfld_cedula_gar = New DataColumn("fld_cedula_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_cedula_gar)
            Me.columnfld_telefono_gar = New DataColumn("fld_telefono_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_telefono_gar)
            Me.columnfld_celular_gar = New DataColumn("fld_celular_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_celular_gar)
            Me.columnfld_direccion_gar = New DataColumn("fld_direccion_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_direccion_gar)
            Me.columnfld_ciudad_gar = New DataColumn("fld_ciudad_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ciudad_gar)
            Me.columnfld_ref_personales_gar = New DataColumn("fld_ref_personales_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ref_personales_gar)
            Me.columnfld_ref_comerciales_gar = New DataColumn("fld_ref_comerciales_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ref_comerciales_gar)
            Me.columnfld_ingresos_mesuales = New DataColumn("fld_ingresos_mesuales", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ingresos_mesuales)
            Me.columnfld_nombre_banco1 = New DataColumn("fld_nombre_banco1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_nombre_banco1)
            Me.columnfld_cuenta_banco1 = New DataColumn("fld_cuenta_banco1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_cuenta_banco1)
            Me.columnfld_nombre_banco2 = New DataColumn("fld_nombre_banco2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_nombre_banco2)
            Me.columnfld_cuenta_banco2 = New DataColumn("fld_cuenta_banco2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_cuenta_banco2)
            Me.columnfld_otra_informacion = New DataColumn("fld_otra_informacion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_otra_informacion)
            Me.columnfld_nombre_con_gar = New DataColumn("fld_nombre_con_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_nombre_con_gar)
            Me.columnfld_apodo_con_gar = New DataColumn("fld_apodo_con_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_apodo_con_gar)
            Me.columnfld_cedula_con_gar = New DataColumn("fld_cedula_con_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_cedula_con_gar)
            Me.columnfld_telefono_con_gar = New DataColumn("fld_telefono_con_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_telefono_con_gar)
            Me.columnfld_celular_con_gar = New DataColumn("fld_celular_con_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_celular_con_gar)
            Me.columnfld_edad = New DataColumn("fld_edad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_edad)
            Me.columnfld_estado_civil = New DataColumn("fld_estado_civil", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_estado_civil)
            Me.columnfld_edad_gar = New DataColumn("fld_edad_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_edad_gar)
            Me.columnfld_estado_civil_gar = New DataColumn("fld_estado_civil_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_estado_civil_gar)
            Me.columnfld_ocupacion_cliente = New DataColumn("fld_ocupacion_cliente", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ocupacion_cliente)
            Me.columnfld_ocupacion_gar = New DataColumn("fld_ocupacion_gar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_ocupacion_gar)
            Me.columnfld_sector_id = New DataColumn("fld_sector_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_sector_id)
            Me.columnfld_sector = New DataColumn("fld_sector", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_sector)
            Me.columnfld_categoria = New DataColumn("fld_categoria", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_categoria)
            Me.columnfld_limite = New DataColumn("fld_limite", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfld_limite)
            Me.columnPuesto = New DataColumn("Puesto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPuesto)
            Me.columnTimpoTrabajo = New DataColumn("TimpoTrabajo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimpoTrabajo)
            Me.columnReferidoPor = New DataColumn("ReferidoPor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReferidoPor)
            Me.columnOriundo = New DataColumn("Oriundo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriundo)
            Me.columnDataCredito = New DataColumn("DataCredito", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDataCredito)
            Me.columnctaContable = New DataColumn("ctaContable", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnctaContable)
            Me.columnemail = New DataColumn("email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnemail)
            Me.columnfechaIngreso = New DataColumn("fechaIngreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfechaIngreso)
            Me.columnfld_id.AutoIncrement = true
            Me.columnfld_id.AllowDBNull = false
        End Sub
        
        Public Function NewsolicitudcreditoclienteRow() As solicitudcreditoclienteRow
            Return CType(Me.NewRow,solicitudcreditoclienteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New solicitudcreditoclienteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(solicitudcreditoclienteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.solicitudcreditoclienteRowChangedEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoclienteRowChanged(Me, New solicitudcreditoclienteRowChangeEvent(CType(e.Row,solicitudcreditoclienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.solicitudcreditoclienteRowChangingEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoclienteRowChanging(Me, New solicitudcreditoclienteRowChangeEvent(CType(e.Row,solicitudcreditoclienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.solicitudcreditoclienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoclienteRowDeleted(Me, New solicitudcreditoclienteRowChangeEvent(CType(e.Row,solicitudcreditoclienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.solicitudcreditoclienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent solicitudcreditoclienteRowDeleting(Me, New solicitudcreditoclienteRowChangeEvent(CType(e.Row,solicitudcreditoclienteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovesolicitudcreditoclienteRow(ByVal row As solicitudcreditoclienteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class solicitudcreditoclienteRow
        Inherits DataRow
        
        Private tablesolicitudcreditocliente As solicitudcreditoclienteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablesolicitudcreditocliente = CType(Me.Table,solicitudcreditoclienteDataTable)
        End Sub
        
        Public Property fld_id As Integer
            Get
                Return CType(Me(Me.tablesolicitudcreditocliente.fld_idColumn),Integer)
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_idColumn) = value
            End Set
        End Property
        
        Public Property fld_FullName As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_FullNameColumn) = value
            End Set
        End Property
        
        Public Property fld_apodo As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_apodoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_apodoColumn) = value
            End Set
        End Property
        
        Public Property fld_Identity As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_IdentityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_IdentityColumn) = value
            End Set
        End Property
        
        Public Property fld_Phone As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_PhoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_PhoneColumn) = value
            End Set
        End Property
        
        Public Property fld_Phone2 As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_Phone2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_Phone2Column) = value
            End Set
        End Property
        
        Public Property fld_Address As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_AddressColumn) = value
            End Set
        End Property
        
        Public Property fld_City As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_CityColumn) = value
            End Set
        End Property
        
        Public Property fld_Status As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_StatusColumn) = value
            End Set
        End Property
        
        Public Property fld_bce As Double
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_bceColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_bceColumn) = value
            End Set
        End Property
        
        Public Property fld_cod_zona As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_cod_zonaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_cod_zonaColumn) = value
            End Set
        End Property
        
        Public Property fld_zona As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_zonaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_zonaColumn) = value
            End Set
        End Property
        
        Public Property fld_nombre_con As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_nombre_conColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_nombre_conColumn) = value
            End Set
        End Property
        
        Public Property fld_apodo_con As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_apodo_conColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_apodo_conColumn) = value
            End Set
        End Property
        
        Public Property fld_cedula_con As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_cedula_conColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_cedula_conColumn) = value
            End Set
        End Property
        
        Public Property fld_telefono_con As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_telefono_conColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_telefono_conColumn) = value
            End Set
        End Property
        
        Public Property fld_celular_con As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_celular_conColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_celular_conColumn) = value
            End Set
        End Property
        
        Public Property fld_ref_personales_cliente As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ref_personales_clienteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ref_personales_clienteColumn) = value
            End Set
        End Property
        
        Public Property fld_ref_comerciales_cliente As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ref_comerciales_clienteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ref_comerciales_clienteColumn) = value
            End Set
        End Property
        
        Public Property fld_nombre_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_nombre_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_nombre_garColumn) = value
            End Set
        End Property
        
        Public Property fld_apodo_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_apodo_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_apodo_garColumn) = value
            End Set
        End Property
        
        Public Property fld_cedula_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_cedula_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_cedula_garColumn) = value
            End Set
        End Property
        
        Public Property fld_telefono_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_telefono_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_telefono_garColumn) = value
            End Set
        End Property
        
        Public Property fld_celular_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_celular_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_celular_garColumn) = value
            End Set
        End Property
        
        Public Property fld_direccion_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_direccion_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_direccion_garColumn) = value
            End Set
        End Property
        
        Public Property fld_ciudad_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ciudad_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ciudad_garColumn) = value
            End Set
        End Property
        
        Public Property fld_ref_personales_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ref_personales_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ref_personales_garColumn) = value
            End Set
        End Property
        
        Public Property fld_ref_comerciales_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ref_comerciales_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ref_comerciales_garColumn) = value
            End Set
        End Property
        
        Public Property fld_ingresos_mesuales As Double
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ingresos_mesualesColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ingresos_mesualesColumn) = value
            End Set
        End Property
        
        Public Property fld_nombre_banco1 As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_nombre_banco1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_nombre_banco1Column) = value
            End Set
        End Property
        
        Public Property fld_cuenta_banco1 As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_cuenta_banco1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_cuenta_banco1Column) = value
            End Set
        End Property
        
        Public Property fld_nombre_banco2 As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_nombre_banco2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_nombre_banco2Column) = value
            End Set
        End Property
        
        Public Property fld_cuenta_banco2 As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_cuenta_banco2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_cuenta_banco2Column) = value
            End Set
        End Property
        
        Public Property fld_otra_informacion As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_otra_informacionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_otra_informacionColumn) = value
            End Set
        End Property
        
        Public Property fld_nombre_con_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_nombre_con_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_nombre_con_garColumn) = value
            End Set
        End Property
        
        Public Property fld_apodo_con_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_apodo_con_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_apodo_con_garColumn) = value
            End Set
        End Property
        
        Public Property fld_cedula_con_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_cedula_con_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_cedula_con_garColumn) = value
            End Set
        End Property
        
        Public Property fld_telefono_con_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_telefono_con_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_telefono_con_garColumn) = value
            End Set
        End Property
        
        Public Property fld_celular_con_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_celular_con_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_celular_con_garColumn) = value
            End Set
        End Property
        
        Public Property fld_edad As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_edadColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_edadColumn) = value
            End Set
        End Property
        
        Public Property fld_estado_civil As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_estado_civilColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_estado_civilColumn) = value
            End Set
        End Property
        
        Public Property fld_edad_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_edad_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_edad_garColumn) = value
            End Set
        End Property
        
        Public Property fld_estado_civil_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_estado_civil_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_estado_civil_garColumn) = value
            End Set
        End Property
        
        Public Property fld_ocupacion_cliente As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ocupacion_clienteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ocupacion_clienteColumn) = value
            End Set
        End Property
        
        Public Property fld_ocupacion_gar As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_ocupacion_garColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_ocupacion_garColumn) = value
            End Set
        End Property
        
        Public Property fld_sector_id As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_sector_idColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_sector_idColumn) = value
            End Set
        End Property
        
        Public Property fld_sector As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_sectorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_sectorColumn) = value
            End Set
        End Property
        
        Public Property fld_categoria As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_categoriaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_categoriaColumn) = value
            End Set
        End Property
        
        Public Property fld_limite As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fld_limiteColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fld_limiteColumn) = value
            End Set
        End Property
        
        Public Property Puesto As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.PuestoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.PuestoColumn) = value
            End Set
        End Property
        
        Public Property TimpoTrabajo As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.TimpoTrabajoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.TimpoTrabajoColumn) = value
            End Set
        End Property
        
        Public Property ReferidoPor As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.ReferidoPorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.ReferidoPorColumn) = value
            End Set
        End Property
        
        Public Property Oriundo As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.OriundoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.OriundoColumn) = value
            End Set
        End Property
        
        Public Property DataCredito As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.DataCreditoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.DataCreditoColumn) = value
            End Set
        End Property
        
        Public Property ctaContable As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.ctaContableColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.ctaContableColumn) = value
            End Set
        End Property
        
        Public Property email As String
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.emailColumn) = value
            End Set
        End Property
        
        Public Property fechaIngreso As Date
            Get
                Try 
                    Return CType(Me(Me.tablesolicitudcreditocliente.fechaIngresoColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesolicitudcreditocliente.fechaIngresoColumn) = value
            End Set
        End Property
        
        Public Function Isfld_FullNameNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_FullNameColumn)
        End Function
        
        Public Sub Setfld_FullNameNull()
            Me(Me.tablesolicitudcreditocliente.fld_FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_apodoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_apodoColumn)
        End Function
        
        Public Sub Setfld_apodoNull()
            Me(Me.tablesolicitudcreditocliente.fld_apodoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_IdentityNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_IdentityColumn)
        End Function
        
        Public Sub Setfld_IdentityNull()
            Me(Me.tablesolicitudcreditocliente.fld_IdentityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_PhoneNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_PhoneColumn)
        End Function
        
        Public Sub Setfld_PhoneNull()
            Me(Me.tablesolicitudcreditocliente.fld_PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_Phone2Null() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_Phone2Column)
        End Function
        
        Public Sub Setfld_Phone2Null()
            Me(Me.tablesolicitudcreditocliente.fld_Phone2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_AddressNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_AddressColumn)
        End Function
        
        Public Sub Setfld_AddressNull()
            Me(Me.tablesolicitudcreditocliente.fld_AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_CityNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_CityColumn)
        End Function
        
        Public Sub Setfld_CityNull()
            Me(Me.tablesolicitudcreditocliente.fld_CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_StatusNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_StatusColumn)
        End Function
        
        Public Sub Setfld_StatusNull()
            Me(Me.tablesolicitudcreditocliente.fld_StatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_bceNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_bceColumn)
        End Function
        
        Public Sub Setfld_bceNull()
            Me(Me.tablesolicitudcreditocliente.fld_bceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_cod_zonaNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_cod_zonaColumn)
        End Function
        
        Public Sub Setfld_cod_zonaNull()
            Me(Me.tablesolicitudcreditocliente.fld_cod_zonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_zonaNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_zonaColumn)
        End Function
        
        Public Sub Setfld_zonaNull()
            Me(Me.tablesolicitudcreditocliente.fld_zonaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_nombre_conNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_nombre_conColumn)
        End Function
        
        Public Sub Setfld_nombre_conNull()
            Me(Me.tablesolicitudcreditocliente.fld_nombre_conColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_apodo_conNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_apodo_conColumn)
        End Function
        
        Public Sub Setfld_apodo_conNull()
            Me(Me.tablesolicitudcreditocliente.fld_apodo_conColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_cedula_conNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_cedula_conColumn)
        End Function
        
        Public Sub Setfld_cedula_conNull()
            Me(Me.tablesolicitudcreditocliente.fld_cedula_conColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_telefono_conNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_telefono_conColumn)
        End Function
        
        Public Sub Setfld_telefono_conNull()
            Me(Me.tablesolicitudcreditocliente.fld_telefono_conColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_celular_conNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_celular_conColumn)
        End Function
        
        Public Sub Setfld_celular_conNull()
            Me(Me.tablesolicitudcreditocliente.fld_celular_conColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ref_personales_clienteNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ref_personales_clienteColumn)
        End Function
        
        Public Sub Setfld_ref_personales_clienteNull()
            Me(Me.tablesolicitudcreditocliente.fld_ref_personales_clienteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ref_comerciales_clienteNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ref_comerciales_clienteColumn)
        End Function
        
        Public Sub Setfld_ref_comerciales_clienteNull()
            Me(Me.tablesolicitudcreditocliente.fld_ref_comerciales_clienteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_nombre_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_nombre_garColumn)
        End Function
        
        Public Sub Setfld_nombre_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_nombre_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_apodo_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_apodo_garColumn)
        End Function
        
        Public Sub Setfld_apodo_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_apodo_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_cedula_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_cedula_garColumn)
        End Function
        
        Public Sub Setfld_cedula_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_cedula_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_telefono_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_telefono_garColumn)
        End Function
        
        Public Sub Setfld_telefono_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_telefono_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_celular_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_celular_garColumn)
        End Function
        
        Public Sub Setfld_celular_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_celular_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_direccion_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_direccion_garColumn)
        End Function
        
        Public Sub Setfld_direccion_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_direccion_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ciudad_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ciudad_garColumn)
        End Function
        
        Public Sub Setfld_ciudad_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_ciudad_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ref_personales_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ref_personales_garColumn)
        End Function
        
        Public Sub Setfld_ref_personales_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_ref_personales_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ref_comerciales_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ref_comerciales_garColumn)
        End Function
        
        Public Sub Setfld_ref_comerciales_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_ref_comerciales_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ingresos_mesualesNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ingresos_mesualesColumn)
        End Function
        
        Public Sub Setfld_ingresos_mesualesNull()
            Me(Me.tablesolicitudcreditocliente.fld_ingresos_mesualesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_nombre_banco1Null() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_nombre_banco1Column)
        End Function
        
        Public Sub Setfld_nombre_banco1Null()
            Me(Me.tablesolicitudcreditocliente.fld_nombre_banco1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_cuenta_banco1Null() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_cuenta_banco1Column)
        End Function
        
        Public Sub Setfld_cuenta_banco1Null()
            Me(Me.tablesolicitudcreditocliente.fld_cuenta_banco1Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_nombre_banco2Null() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_nombre_banco2Column)
        End Function
        
        Public Sub Setfld_nombre_banco2Null()
            Me(Me.tablesolicitudcreditocliente.fld_nombre_banco2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_cuenta_banco2Null() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_cuenta_banco2Column)
        End Function
        
        Public Sub Setfld_cuenta_banco2Null()
            Me(Me.tablesolicitudcreditocliente.fld_cuenta_banco2Column) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_otra_informacionNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_otra_informacionColumn)
        End Function
        
        Public Sub Setfld_otra_informacionNull()
            Me(Me.tablesolicitudcreditocliente.fld_otra_informacionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_nombre_con_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_nombre_con_garColumn)
        End Function
        
        Public Sub Setfld_nombre_con_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_nombre_con_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_apodo_con_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_apodo_con_garColumn)
        End Function
        
        Public Sub Setfld_apodo_con_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_apodo_con_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_cedula_con_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_cedula_con_garColumn)
        End Function
        
        Public Sub Setfld_cedula_con_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_cedula_con_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_telefono_con_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_telefono_con_garColumn)
        End Function
        
        Public Sub Setfld_telefono_con_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_telefono_con_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_celular_con_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_celular_con_garColumn)
        End Function
        
        Public Sub Setfld_celular_con_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_celular_con_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_edadNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_edadColumn)
        End Function
        
        Public Sub Setfld_edadNull()
            Me(Me.tablesolicitudcreditocliente.fld_edadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_estado_civilNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_estado_civilColumn)
        End Function
        
        Public Sub Setfld_estado_civilNull()
            Me(Me.tablesolicitudcreditocliente.fld_estado_civilColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_edad_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_edad_garColumn)
        End Function
        
        Public Sub Setfld_edad_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_edad_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_estado_civil_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_estado_civil_garColumn)
        End Function
        
        Public Sub Setfld_estado_civil_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_estado_civil_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ocupacion_clienteNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ocupacion_clienteColumn)
        End Function
        
        Public Sub Setfld_ocupacion_clienteNull()
            Me(Me.tablesolicitudcreditocliente.fld_ocupacion_clienteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_ocupacion_garNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_ocupacion_garColumn)
        End Function
        
        Public Sub Setfld_ocupacion_garNull()
            Me(Me.tablesolicitudcreditocliente.fld_ocupacion_garColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_sector_idNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_sector_idColumn)
        End Function
        
        Public Sub Setfld_sector_idNull()
            Me(Me.tablesolicitudcreditocliente.fld_sector_idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_sectorNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_sectorColumn)
        End Function
        
        Public Sub Setfld_sectorNull()
            Me(Me.tablesolicitudcreditocliente.fld_sectorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_categoriaNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_categoriaColumn)
        End Function
        
        Public Sub Setfld_categoriaNull()
            Me(Me.tablesolicitudcreditocliente.fld_categoriaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isfld_limiteNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fld_limiteColumn)
        End Function
        
        Public Sub Setfld_limiteNull()
            Me(Me.tablesolicitudcreditocliente.fld_limiteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.PuestoColumn)
        End Function
        
        Public Sub SetPuestoNull()
            Me(Me.tablesolicitudcreditocliente.PuestoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimpoTrabajoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.TimpoTrabajoColumn)
        End Function
        
        Public Sub SetTimpoTrabajoNull()
            Me(Me.tablesolicitudcreditocliente.TimpoTrabajoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReferidoPorNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.ReferidoPorColumn)
        End Function
        
        Public Sub SetReferidoPorNull()
            Me(Me.tablesolicitudcreditocliente.ReferidoPorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriundoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.OriundoColumn)
        End Function
        
        Public Sub SetOriundoNull()
            Me(Me.tablesolicitudcreditocliente.OriundoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDataCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.DataCreditoColumn)
        End Function
        
        Public Sub SetDataCreditoNull()
            Me(Me.tablesolicitudcreditocliente.DataCreditoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsctaContableNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.ctaContableColumn)
        End Function
        
        Public Sub SetctaContableNull()
            Me(Me.tablesolicitudcreditocliente.ctaContableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.emailColumn)
        End Function
        
        Public Sub SetemailNull()
            Me(Me.tablesolicitudcreditocliente.emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tablesolicitudcreditocliente.fechaIngresoColumn)
        End Function
        
        Public Sub SetfechaIngresoNull()
            Me(Me.tablesolicitudcreditocliente.fechaIngresoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class solicitudcreditoclienteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As solicitudcreditoclienteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As solicitudcreditoclienteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As solicitudcreditoclienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
